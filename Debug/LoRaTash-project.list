
LoRaTash-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000407c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a8  080041a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041b0  080041b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  080041c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  200001c4  080041c4  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b424  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cfa  00000000  00000000  0002b458  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb0  00000000  00000000  0002d158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b00  00000000  00000000  0002dd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014654  00000000  00000000  0002e808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009db4  00000000  00000000  00042e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007feed  00000000  00000000  0004cc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ccafd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002970  00000000  00000000  000ccb78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004124 	.word	0x08004124

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004124 	.word	0x08004124

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000492:	1dfb      	adds	r3, r7, #7
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000498:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <HAL_Init+0x3c>)
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <HAL_Init+0x3c>)
 800049e:	2140      	movs	r1, #64	; 0x40
 80004a0:	430a      	orrs	r2, r1
 80004a2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004a4:	2000      	movs	r0, #0
 80004a6:	f000 f811 	bl	80004cc <HAL_InitTick>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d003      	beq.n	80004b6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e001      	b.n	80004ba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004b6:	f003 fbe9 	bl	8003c8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004ba:	1dfb      	adds	r3, r7, #7
 80004bc:	781b      	ldrb	r3, [r3, #0]
}
 80004be:	0018      	movs	r0, r3
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b002      	add	sp, #8
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	40022000 	.word	0x40022000

080004cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004d4:	4b14      	ldr	r3, [pc, #80]	; (8000528 <HAL_InitTick+0x5c>)
 80004d6:	681c      	ldr	r4, [r3, #0]
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <HAL_InitTick+0x60>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	0019      	movs	r1, r3
 80004de:	23fa      	movs	r3, #250	; 0xfa
 80004e0:	0098      	lsls	r0, r3, #2
 80004e2:	f7ff fe11 	bl	8000108 <__udivsi3>
 80004e6:	0003      	movs	r3, r0
 80004e8:	0019      	movs	r1, r3
 80004ea:	0020      	movs	r0, r4
 80004ec:	f7ff fe0c 	bl	8000108 <__udivsi3>
 80004f0:	0003      	movs	r3, r0
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 f92d 	bl	8000752 <HAL_SYSTICK_Config>
 80004f8:	1e03      	subs	r3, r0, #0
 80004fa:	d001      	beq.n	8000500 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80004fc:	2301      	movs	r3, #1
 80004fe:	e00f      	b.n	8000520 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2b03      	cmp	r3, #3
 8000504:	d80b      	bhi.n	800051e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000506:	6879      	ldr	r1, [r7, #4]
 8000508:	2301      	movs	r3, #1
 800050a:	425b      	negs	r3, r3
 800050c:	2200      	movs	r2, #0
 800050e:	0018      	movs	r0, r3
 8000510:	f000 f8fa 	bl	8000708 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <HAL_InitTick+0x64>)
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800051a:	2300      	movs	r3, #0
 800051c:	e000      	b.n	8000520 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800051e:	2301      	movs	r3, #1
}
 8000520:	0018      	movs	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	b003      	add	sp, #12
 8000526:	bd90      	pop	{r4, r7, pc}
 8000528:	20000008 	.word	0x20000008
 800052c:	20000004 	.word	0x20000004
 8000530:	20000000 	.word	0x20000000

08000534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <HAL_IncTick+0x1c>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	001a      	movs	r2, r3
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <HAL_IncTick+0x20>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	18d2      	adds	r2, r2, r3
 8000544:	4b03      	ldr	r3, [pc, #12]	; (8000554 <HAL_IncTick+0x20>)
 8000546:	601a      	str	r2, [r3, #0]
}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	20000004 	.word	0x20000004
 8000554:	2000002c 	.word	0x2000002c

08000558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  return uwTick;
 800055c:	4b02      	ldr	r3, [pc, #8]	; (8000568 <HAL_GetTick+0x10>)
 800055e:	681b      	ldr	r3, [r3, #0]
}
 8000560:	0018      	movs	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	2000002c 	.word	0x2000002c

0800056c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000574:	f7ff fff0 	bl	8000558 <HAL_GetTick>
 8000578:	0003      	movs	r3, r0
 800057a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	3301      	adds	r3, #1
 8000584:	d005      	beq.n	8000592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <HAL_Delay+0x40>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	001a      	movs	r2, r3
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	189b      	adds	r3, r3, r2
 8000590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	f7ff ffe0 	bl	8000558 <HAL_GetTick>
 8000598:	0002      	movs	r2, r0
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d8f7      	bhi.n	8000594 <HAL_Delay+0x28>
  {
  }
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b004      	add	sp, #16
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000004 	.word	0x20000004

080005b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	0002      	movs	r2, r0
 80005b8:	1dfb      	adds	r3, r7, #7
 80005ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80005bc:	1dfb      	adds	r3, r7, #7
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b7f      	cmp	r3, #127	; 0x7f
 80005c2:	d809      	bhi.n	80005d8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c4:	1dfb      	adds	r3, r7, #7
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	001a      	movs	r2, r3
 80005ca:	231f      	movs	r3, #31
 80005cc:	401a      	ands	r2, r3
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <__NVIC_EnableIRQ+0x30>)
 80005d0:	2101      	movs	r1, #1
 80005d2:	4091      	lsls	r1, r2
 80005d4:	000a      	movs	r2, r1
 80005d6:	601a      	str	r2, [r3, #0]
  }
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b002      	add	sp, #8
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	e000e100 	.word	0xe000e100

080005e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	0002      	movs	r2, r0
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	1dfb      	adds	r3, r7, #7
 80005f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80005f2:	1dfb      	adds	r3, r7, #7
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b7f      	cmp	r3, #127	; 0x7f
 80005f8:	d828      	bhi.n	800064c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005fa:	4a2f      	ldr	r2, [pc, #188]	; (80006b8 <__NVIC_SetPriority+0xd4>)
 80005fc:	1dfb      	adds	r3, r7, #7
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b25b      	sxtb	r3, r3
 8000602:	089b      	lsrs	r3, r3, #2
 8000604:	33c0      	adds	r3, #192	; 0xc0
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	589b      	ldr	r3, [r3, r2]
 800060a:	1dfa      	adds	r2, r7, #7
 800060c:	7812      	ldrb	r2, [r2, #0]
 800060e:	0011      	movs	r1, r2
 8000610:	2203      	movs	r2, #3
 8000612:	400a      	ands	r2, r1
 8000614:	00d2      	lsls	r2, r2, #3
 8000616:	21ff      	movs	r1, #255	; 0xff
 8000618:	4091      	lsls	r1, r2
 800061a:	000a      	movs	r2, r1
 800061c:	43d2      	mvns	r2, r2
 800061e:	401a      	ands	r2, r3
 8000620:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	019b      	lsls	r3, r3, #6
 8000626:	22ff      	movs	r2, #255	; 0xff
 8000628:	401a      	ands	r2, r3
 800062a:	1dfb      	adds	r3, r7, #7
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	0018      	movs	r0, r3
 8000630:	2303      	movs	r3, #3
 8000632:	4003      	ands	r3, r0
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000638:	481f      	ldr	r0, [pc, #124]	; (80006b8 <__NVIC_SetPriority+0xd4>)
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	b25b      	sxtb	r3, r3
 8000640:	089b      	lsrs	r3, r3, #2
 8000642:	430a      	orrs	r2, r1
 8000644:	33c0      	adds	r3, #192	; 0xc0
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800064a:	e031      	b.n	80006b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800064c:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <__NVIC_SetPriority+0xd8>)
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	0019      	movs	r1, r3
 8000654:	230f      	movs	r3, #15
 8000656:	400b      	ands	r3, r1
 8000658:	3b08      	subs	r3, #8
 800065a:	089b      	lsrs	r3, r3, #2
 800065c:	3306      	adds	r3, #6
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	18d3      	adds	r3, r2, r3
 8000662:	3304      	adds	r3, #4
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	1dfa      	adds	r2, r7, #7
 8000668:	7812      	ldrb	r2, [r2, #0]
 800066a:	0011      	movs	r1, r2
 800066c:	2203      	movs	r2, #3
 800066e:	400a      	ands	r2, r1
 8000670:	00d2      	lsls	r2, r2, #3
 8000672:	21ff      	movs	r1, #255	; 0xff
 8000674:	4091      	lsls	r1, r2
 8000676:	000a      	movs	r2, r1
 8000678:	43d2      	mvns	r2, r2
 800067a:	401a      	ands	r2, r3
 800067c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	019b      	lsls	r3, r3, #6
 8000682:	22ff      	movs	r2, #255	; 0xff
 8000684:	401a      	ands	r2, r3
 8000686:	1dfb      	adds	r3, r7, #7
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	0018      	movs	r0, r3
 800068c:	2303      	movs	r3, #3
 800068e:	4003      	ands	r3, r0
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <__NVIC_SetPriority+0xd8>)
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	001c      	movs	r4, r3
 800069c:	230f      	movs	r3, #15
 800069e:	4023      	ands	r3, r4
 80006a0:	3b08      	subs	r3, #8
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	430a      	orrs	r2, r1
 80006a6:	3306      	adds	r3, #6
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	18c3      	adds	r3, r0, r3
 80006ac:	3304      	adds	r3, #4
 80006ae:	601a      	str	r2, [r3, #0]
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b003      	add	sp, #12
 80006b6:	bd90      	pop	{r4, r7, pc}
 80006b8:	e000e100 	.word	0xe000e100
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	4a0c      	ldr	r2, [pc, #48]	; (8000700 <SysTick_Config+0x40>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d901      	bls.n	80006d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006d2:	2301      	movs	r3, #1
 80006d4:	e010      	b.n	80006f8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <SysTick_Config+0x44>)
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	3a01      	subs	r2, #1
 80006dc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006de:	2301      	movs	r3, #1
 80006e0:	425b      	negs	r3, r3
 80006e2:	2103      	movs	r1, #3
 80006e4:	0018      	movs	r0, r3
 80006e6:	f7ff ff7d 	bl	80005e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <SysTick_Config+0x44>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <SysTick_Config+0x44>)
 80006f2:	2207      	movs	r2, #7
 80006f4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	0018      	movs	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b002      	add	sp, #8
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	00ffffff 	.word	0x00ffffff
 8000704:	e000e010 	.word	0xe000e010

08000708 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	60b9      	str	r1, [r7, #8]
 8000710:	607a      	str	r2, [r7, #4]
 8000712:	210f      	movs	r1, #15
 8000714:	187b      	adds	r3, r7, r1
 8000716:	1c02      	adds	r2, r0, #0
 8000718:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800071a:	68ba      	ldr	r2, [r7, #8]
 800071c:	187b      	adds	r3, r7, r1
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b25b      	sxtb	r3, r3
 8000722:	0011      	movs	r1, r2
 8000724:	0018      	movs	r0, r3
 8000726:	f7ff ff5d 	bl	80005e4 <__NVIC_SetPriority>
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b004      	add	sp, #16
 8000730:	bd80      	pop	{r7, pc}

08000732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	0002      	movs	r2, r0
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	b25b      	sxtb	r3, r3
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff ff33 	bl	80005b0 <__NVIC_EnableIRQ>
}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff ffaf 	bl	80006c0 <SysTick_Config>
 8000762:	0003      	movs	r3, r0
}
 8000764:	0018      	movs	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	b002      	add	sp, #8
 800076a:	bd80      	pop	{r7, pc}

0800076c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000774:	230f      	movs	r3, #15
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2225      	movs	r2, #37	; 0x25
 8000780:	5c9b      	ldrb	r3, [r3, r2]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b02      	cmp	r3, #2
 8000786:	d008      	beq.n	800079a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2204      	movs	r2, #4
 800078c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2224      	movs	r2, #36	; 0x24
 8000792:	2100      	movs	r1, #0
 8000794:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e024      	b.n	80007e4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	210e      	movs	r1, #14
 80007a6:	438a      	bics	r2, r1
 80007a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2101      	movs	r1, #1
 80007b6:	438a      	bics	r2, r1
 80007b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	221c      	movs	r2, #28
 80007c0:	401a      	ands	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	2101      	movs	r1, #1
 80007c8:	4091      	lsls	r1, r2
 80007ca:	000a      	movs	r2, r1
 80007cc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2225      	movs	r2, #37	; 0x25
 80007d2:	2101      	movs	r1, #1
 80007d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2224      	movs	r2, #36	; 0x24
 80007da:	2100      	movs	r1, #0
 80007dc:	5499      	strb	r1, [r3, r2]

    return status;
 80007de:	230f      	movs	r3, #15
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b004      	add	sp, #16
 80007ea:	bd80      	pop	{r7, pc}

080007ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80007f4:	230f      	movs	r3, #15
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2225      	movs	r2, #37	; 0x25
 8000800:	5c9b      	ldrb	r3, [r3, r2]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b02      	cmp	r3, #2
 8000806:	d007      	beq.n	8000818 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2204      	movs	r2, #4
 800080c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800080e:	230f      	movs	r3, #15
 8000810:	18fb      	adds	r3, r7, r3
 8000812:	2201      	movs	r2, #1
 8000814:	701a      	strb	r2, [r3, #0]
 8000816:	e02a      	b.n	800086e <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	210e      	movs	r1, #14
 8000824:	438a      	bics	r2, r1
 8000826:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2101      	movs	r1, #1
 8000834:	438a      	bics	r2, r1
 8000836:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083c:	221c      	movs	r2, #28
 800083e:	401a      	ands	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	2101      	movs	r1, #1
 8000846:	4091      	lsls	r1, r2
 8000848:	000a      	movs	r2, r1
 800084a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2225      	movs	r2, #37	; 0x25
 8000850:	2101      	movs	r1, #1
 8000852:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2224      	movs	r2, #36	; 0x24
 8000858:	2100      	movs	r1, #0
 800085a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000860:	2b00      	cmp	r3, #0
 8000862:	d004      	beq.n	800086e <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	0010      	movs	r0, r2
 800086c:	4798      	blx	r3
    }
  }
  return status;
 800086e:	230f      	movs	r3, #15
 8000870:	18fb      	adds	r3, r7, r3
 8000872:	781b      	ldrb	r3, [r3, #0]
}
 8000874:	0018      	movs	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	b004      	add	sp, #16
 800087a:	bd80      	pop	{r7, pc}

0800087c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000892:	e155      	b.n	8000b40 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2101      	movs	r1, #1
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	4091      	lsls	r1, r2
 800089e:	000a      	movs	r2, r1
 80008a0:	4013      	ands	r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d100      	bne.n	80008ac <HAL_GPIO_Init+0x30>
 80008aa:	e146      	b.n	8000b3a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d00b      	beq.n	80008cc <HAL_GPIO_Init+0x50>
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d007      	beq.n	80008cc <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c0:	2b11      	cmp	r3, #17
 80008c2:	d003      	beq.n	80008cc <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	2b12      	cmp	r3, #18
 80008ca:	d130      	bne.n	800092e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	2203      	movs	r2, #3
 80008d8:	409a      	lsls	r2, r3
 80008da:	0013      	movs	r3, r2
 80008dc:	43da      	mvns	r2, r3
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	4013      	ands	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	68da      	ldr	r2, [r3, #12]
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	409a      	lsls	r2, r3
 80008ee:	0013      	movs	r3, r2
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000902:	2201      	movs	r2, #1
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	409a      	lsls	r2, r3
 8000908:	0013      	movs	r3, r2
 800090a:	43da      	mvns	r2, r3
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	4013      	ands	r3, r2
 8000910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	091b      	lsrs	r3, r3, #4
 8000918:	2201      	movs	r2, #1
 800091a:	401a      	ands	r2, r3
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	409a      	lsls	r2, r3
 8000920:	0013      	movs	r3, r2
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4313      	orrs	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	2203      	movs	r2, #3
 800093a:	409a      	lsls	r2, r3
 800093c:	0013      	movs	r3, r2
 800093e:	43da      	mvns	r2, r3
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	4013      	ands	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	409a      	lsls	r2, r3
 8000950:	0013      	movs	r3, r2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	4313      	orrs	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	2b02      	cmp	r3, #2
 8000964:	d003      	beq.n	800096e <HAL_GPIO_Init+0xf2>
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	2b12      	cmp	r3, #18
 800096c:	d123      	bne.n	80009b6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	08da      	lsrs	r2, r3, #3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3208      	adds	r2, #8
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	58d3      	ldr	r3, [r2, r3]
 800097a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	2207      	movs	r2, #7
 8000980:	4013      	ands	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	220f      	movs	r2, #15
 8000986:	409a      	lsls	r2, r3
 8000988:	0013      	movs	r3, r2
 800098a:	43da      	mvns	r2, r3
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	4013      	ands	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	691a      	ldr	r2, [r3, #16]
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	2107      	movs	r1, #7
 800099a:	400b      	ands	r3, r1
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	409a      	lsls	r2, r3
 80009a0:	0013      	movs	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	08da      	lsrs	r2, r3, #3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3208      	adds	r2, #8
 80009b0:	0092      	lsls	r2, r2, #2
 80009b2:	6939      	ldr	r1, [r7, #16]
 80009b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	2203      	movs	r2, #3
 80009c2:	409a      	lsls	r2, r3
 80009c4:	0013      	movs	r3, r2
 80009c6:	43da      	mvns	r2, r3
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	2203      	movs	r2, #3
 80009d4:	401a      	ands	r2, r3
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	409a      	lsls	r2, r3
 80009dc:	0013      	movs	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685a      	ldr	r2, [r3, #4]
 80009ee:	2380      	movs	r3, #128	; 0x80
 80009f0:	055b      	lsls	r3, r3, #21
 80009f2:	4013      	ands	r3, r2
 80009f4:	d100      	bne.n	80009f8 <HAL_GPIO_Init+0x17c>
 80009f6:	e0a0      	b.n	8000b3a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f8:	4b57      	ldr	r3, [pc, #348]	; (8000b58 <HAL_GPIO_Init+0x2dc>)
 80009fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009fc:	4b56      	ldr	r3, [pc, #344]	; (8000b58 <HAL_GPIO_Init+0x2dc>)
 80009fe:	2101      	movs	r1, #1
 8000a00:	430a      	orrs	r2, r1
 8000a02:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a04:	4a55      	ldr	r2, [pc, #340]	; (8000b5c <HAL_GPIO_Init+0x2e0>)
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	089b      	lsrs	r3, r3, #2
 8000a0a:	3302      	adds	r3, #2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	589b      	ldr	r3, [r3, r2]
 8000a10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	2203      	movs	r2, #3
 8000a16:	4013      	ands	r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	220f      	movs	r2, #15
 8000a1c:	409a      	lsls	r2, r3
 8000a1e:	0013      	movs	r3, r2
 8000a20:	43da      	mvns	r2, r3
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	23a0      	movs	r3, #160	; 0xa0
 8000a2c:	05db      	lsls	r3, r3, #23
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d01f      	beq.n	8000a72 <HAL_GPIO_Init+0x1f6>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a4a      	ldr	r2, [pc, #296]	; (8000b60 <HAL_GPIO_Init+0x2e4>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d019      	beq.n	8000a6e <HAL_GPIO_Init+0x1f2>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a49      	ldr	r2, [pc, #292]	; (8000b64 <HAL_GPIO_Init+0x2e8>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d013      	beq.n	8000a6a <HAL_GPIO_Init+0x1ee>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a48      	ldr	r2, [pc, #288]	; (8000b68 <HAL_GPIO_Init+0x2ec>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d00d      	beq.n	8000a66 <HAL_GPIO_Init+0x1ea>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a47      	ldr	r2, [pc, #284]	; (8000b6c <HAL_GPIO_Init+0x2f0>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d007      	beq.n	8000a62 <HAL_GPIO_Init+0x1e6>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a46      	ldr	r2, [pc, #280]	; (8000b70 <HAL_GPIO_Init+0x2f4>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d101      	bne.n	8000a5e <HAL_GPIO_Init+0x1e2>
 8000a5a:	2305      	movs	r3, #5
 8000a5c:	e00a      	b.n	8000a74 <HAL_GPIO_Init+0x1f8>
 8000a5e:	2306      	movs	r3, #6
 8000a60:	e008      	b.n	8000a74 <HAL_GPIO_Init+0x1f8>
 8000a62:	2304      	movs	r3, #4
 8000a64:	e006      	b.n	8000a74 <HAL_GPIO_Init+0x1f8>
 8000a66:	2303      	movs	r3, #3
 8000a68:	e004      	b.n	8000a74 <HAL_GPIO_Init+0x1f8>
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	e002      	b.n	8000a74 <HAL_GPIO_Init+0x1f8>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e000      	b.n	8000a74 <HAL_GPIO_Init+0x1f8>
 8000a72:	2300      	movs	r3, #0
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	2103      	movs	r1, #3
 8000a78:	400a      	ands	r2, r1
 8000a7a:	0092      	lsls	r2, r2, #2
 8000a7c:	4093      	lsls	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a84:	4935      	ldr	r1, [pc, #212]	; (8000b5c <HAL_GPIO_Init+0x2e0>)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	089b      	lsrs	r3, r3, #2
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a92:	4b38      	ldr	r3, [pc, #224]	; (8000b74 <HAL_GPIO_Init+0x2f8>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	43da      	mvns	r2, r3
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	4013      	ands	r3, r2
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <HAL_GPIO_Init+0x2f8>)
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000abc:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <HAL_GPIO_Init+0x2f8>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	43da      	mvns	r2, r3
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685a      	ldr	r2, [r3, #4]
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	029b      	lsls	r3, r3, #10
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <HAL_GPIO_Init+0x2f8>)
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ae6:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <HAL_GPIO_Init+0x2f8>)
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	43da      	mvns	r2, r3
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	035b      	lsls	r3, r3, #13
 8000afe:	4013      	ands	r3, r2
 8000b00:	d003      	beq.n	8000b0a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <HAL_GPIO_Init+0x2f8>)
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_GPIO_Init+0x2f8>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	43da      	mvns	r2, r3
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	039b      	lsls	r3, r3, #14
 8000b28:	4013      	ands	r3, r2
 8000b2a:	d003      	beq.n	8000b34 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <HAL_GPIO_Init+0x2f8>)
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	40da      	lsrs	r2, r3
 8000b48:	1e13      	subs	r3, r2, #0
 8000b4a:	d000      	beq.n	8000b4e <HAL_GPIO_Init+0x2d2>
 8000b4c:	e6a2      	b.n	8000894 <HAL_GPIO_Init+0x18>
  }
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b006      	add	sp, #24
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40010000 	.word	0x40010000
 8000b60:	50000400 	.word	0x50000400
 8000b64:	50000800 	.word	0x50000800
 8000b68:	50000c00 	.word	0x50000c00
 8000b6c:	50001000 	.word	0x50001000
 8000b70:	50001c00 	.word	0x50001c00
 8000b74:	40010400 	.word	0x40010400

08000b78 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	0008      	movs	r0, r1
 8000b82:	0011      	movs	r1, r2
 8000b84:	1cbb      	adds	r3, r7, #2
 8000b86:	1c02      	adds	r2, r0, #0
 8000b88:	801a      	strh	r2, [r3, #0]
 8000b8a:	1c7b      	adds	r3, r7, #1
 8000b8c:	1c0a      	adds	r2, r1, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b90:	1c7b      	adds	r3, r7, #1
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d004      	beq.n	8000ba2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b98:	1cbb      	adds	r3, r7, #2
 8000b9a:	881a      	ldrh	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ba0:	e003      	b.n	8000baa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000ba2:	1cbb      	adds	r3, r7, #2
 8000ba4:	881a      	ldrh	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	0002      	movs	r2, r0
 8000bbc:	1dbb      	adds	r3, r7, #6
 8000bbe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	1dba      	adds	r2, r7, #6
 8000bc6:	8812      	ldrh	r2, [r2, #0]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	d008      	beq.n	8000bde <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000bce:	1dba      	adds	r2, r7, #6
 8000bd0:	8812      	ldrh	r2, [r2, #0]
 8000bd2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bd4:	1dbb      	adds	r3, r7, #6
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 f807 	bl	8000bec <HAL_GPIO_EXTI_Callback>
  }
}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	40010400 	.word	0x40010400

08000bec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	1dbb      	adds	r3, r7, #6
 8000bf6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b002      	add	sp, #8
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c00:	b5b0      	push	{r4, r5, r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	f000 fbc2 	bl	8001398 <HAL_RCC_OscConfig+0x798>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c14:	4bca      	ldr	r3, [pc, #808]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	220c      	movs	r2, #12
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c1e:	4bc8      	ldr	r3, [pc, #800]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000c20:	68da      	ldr	r2, [r3, #12]
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	025b      	lsls	r3, r3, #9
 8000c26:	4013      	ands	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4013      	ands	r3, r2
 8000c32:	d100      	bne.n	8000c36 <HAL_RCC_OscConfig+0x36>
 8000c34:	e07e      	b.n	8000d34 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	2b08      	cmp	r3, #8
 8000c3a:	d007      	beq.n	8000c4c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	2b0c      	cmp	r3, #12
 8000c40:	d112      	bne.n	8000c68 <HAL_RCC_OscConfig+0x68>
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	025b      	lsls	r3, r3, #9
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d10d      	bne.n	8000c68 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c4c:	4bbc      	ldr	r3, [pc, #752]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	029b      	lsls	r3, r3, #10
 8000c54:	4013      	ands	r3, r2
 8000c56:	d100      	bne.n	8000c5a <HAL_RCC_OscConfig+0x5a>
 8000c58:	e06b      	b.n	8000d32 <HAL_RCC_OscConfig+0x132>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d167      	bne.n	8000d32 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	f000 fb98 	bl	8001398 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	025b      	lsls	r3, r3, #9
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d107      	bne.n	8000c84 <HAL_RCC_OscConfig+0x84>
 8000c74:	4bb2      	ldr	r3, [pc, #712]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4bb1      	ldr	r3, [pc, #708]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000c7a:	2180      	movs	r1, #128	; 0x80
 8000c7c:	0249      	lsls	r1, r1, #9
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	e027      	b.n	8000cd4 <HAL_RCC_OscConfig+0xd4>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	23a0      	movs	r3, #160	; 0xa0
 8000c8a:	02db      	lsls	r3, r3, #11
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d10e      	bne.n	8000cae <HAL_RCC_OscConfig+0xae>
 8000c90:	4bab      	ldr	r3, [pc, #684]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4baa      	ldr	r3, [pc, #680]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000c96:	2180      	movs	r1, #128	; 0x80
 8000c98:	02c9      	lsls	r1, r1, #11
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	4ba8      	ldr	r3, [pc, #672]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4ba7      	ldr	r3, [pc, #668]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	0249      	lsls	r1, r1, #9
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	e012      	b.n	8000cd4 <HAL_RCC_OscConfig+0xd4>
 8000cae:	4ba4      	ldr	r3, [pc, #656]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4ba3      	ldr	r3, [pc, #652]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000cb4:	49a3      	ldr	r1, [pc, #652]	; (8000f44 <HAL_RCC_OscConfig+0x344>)
 8000cb6:	400a      	ands	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	4ba1      	ldr	r3, [pc, #644]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	025b      	lsls	r3, r3, #9
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4b9d      	ldr	r3, [pc, #628]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b9c      	ldr	r3, [pc, #624]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000cce:	499e      	ldr	r1, [pc, #632]	; (8000f48 <HAL_RCC_OscConfig+0x348>)
 8000cd0:	400a      	ands	r2, r1
 8000cd2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d015      	beq.n	8000d08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fc3c 	bl	8000558 <HAL_GetTick>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ce4:	e009      	b.n	8000cfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce6:	f7ff fc37 	bl	8000558 <HAL_GetTick>
 8000cea:	0002      	movs	r2, r0
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b64      	cmp	r3, #100	; 0x64
 8000cf2:	d902      	bls.n	8000cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	f000 fb4f 	bl	8001398 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000cfa:	4b91      	ldr	r3, [pc, #580]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	2380      	movs	r3, #128	; 0x80
 8000d00:	029b      	lsls	r3, r3, #10
 8000d02:	4013      	ands	r3, r2
 8000d04:	d0ef      	beq.n	8000ce6 <HAL_RCC_OscConfig+0xe6>
 8000d06:	e015      	b.n	8000d34 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fc26 	bl	8000558 <HAL_GetTick>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d10:	e008      	b.n	8000d24 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d12:	f7ff fc21 	bl	8000558 <HAL_GetTick>
 8000d16:	0002      	movs	r2, r0
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	2b64      	cmp	r3, #100	; 0x64
 8000d1e:	d901      	bls.n	8000d24 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000d20:	2303      	movs	r3, #3
 8000d22:	e339      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d24:	4b86      	ldr	r3, [pc, #536]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	029b      	lsls	r3, r3, #10
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	d1f0      	bne.n	8000d12 <HAL_RCC_OscConfig+0x112>
 8000d30:	e000      	b.n	8000d34 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d32:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2202      	movs	r2, #2
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	d100      	bne.n	8000d40 <HAL_RCC_OscConfig+0x140>
 8000d3e:	e09a      	b.n	8000e76 <HAL_RCC_OscConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	2220      	movs	r2, #32
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	d009      	beq.n	8000d62 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000d4e:	4b7c      	ldr	r3, [pc, #496]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b7b      	ldr	r3, [pc, #492]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000d54:	2120      	movs	r1, #32
 8000d56:	430a      	orrs	r2, r1
 8000d58:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	4393      	bics	r3, r2
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d005      	beq.n	8000d74 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	2b0c      	cmp	r3, #12
 8000d6c:	d13f      	bne.n	8000dee <HAL_RCC_OscConfig+0x1ee>
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d13c      	bne.n	8000dee <HAL_RCC_OscConfig+0x1ee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000d74:	4b72      	ldr	r3, [pc, #456]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2204      	movs	r2, #4
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	d004      	beq.n	8000d88 <HAL_RCC_OscConfig+0x188>
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d101      	bne.n	8000d88 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e307      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d88:	4b6d      	ldr	r3, [pc, #436]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	4a6f      	ldr	r2, [pc, #444]	; (8000f4c <HAL_RCC_OscConfig+0x34c>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	0019      	movs	r1, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	021a      	lsls	r2, r3, #8
 8000d98:	4b69      	ldr	r3, [pc, #420]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000d9e:	4b68      	ldr	r3, [pc, #416]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2209      	movs	r2, #9
 8000da4:	4393      	bics	r3, r2
 8000da6:	0019      	movs	r1, r3
 8000da8:	4b65      	ldr	r3, [pc, #404]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dac:	430a      	orrs	r2, r1
 8000dae:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000db0:	f000 fc44 	bl	800163c <HAL_RCC_GetSysClockFreq>
 8000db4:	0001      	movs	r1, r0
 8000db6:	4b62      	ldr	r3, [pc, #392]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	4a63      	ldr	r2, [pc, #396]	; (8000f50 <HAL_RCC_OscConfig+0x350>)
 8000dc2:	5cd3      	ldrb	r3, [r2, r3]
 8000dc4:	000a      	movs	r2, r1
 8000dc6:	40da      	lsrs	r2, r3
 8000dc8:	4b62      	ldr	r3, [pc, #392]	; (8000f54 <HAL_RCC_OscConfig+0x354>)
 8000dca:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000dcc:	4b62      	ldr	r3, [pc, #392]	; (8000f58 <HAL_RCC_OscConfig+0x358>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2513      	movs	r5, #19
 8000dd2:	197c      	adds	r4, r7, r5
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f7ff fb79 	bl	80004cc <HAL_InitTick>
 8000dda:	0003      	movs	r3, r0
 8000ddc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000dde:	197b      	adds	r3, r7, r5
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d047      	beq.n	8000e76 <HAL_RCC_OscConfig+0x276>
      {
        return status;
 8000de6:	2313      	movs	r3, #19
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	e2d4      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d027      	beq.n	8000e44 <HAL_RCC_OscConfig+0x244>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000df4:	4b52      	ldr	r3, [pc, #328]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2209      	movs	r2, #9
 8000dfa:	4393      	bics	r3, r2
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	4b50      	ldr	r3, [pc, #320]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e02:	430a      	orrs	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e06:	f7ff fba7 	bl	8000558 <HAL_GetTick>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0x222>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e10:	f7ff fba2 	bl	8000558 <HAL_GetTick>
 8000e14:	0002      	movs	r2, r0
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x222>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e2ba      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e22:	4b47      	ldr	r3, [pc, #284]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2204      	movs	r2, #4
 8000e28:	4013      	ands	r3, r2
 8000e2a:	d0f1      	beq.n	8000e10 <HAL_RCC_OscConfig+0x210>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2c:	4b44      	ldr	r3, [pc, #272]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	4a46      	ldr	r2, [pc, #280]	; (8000f4c <HAL_RCC_OscConfig+0x34c>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	0019      	movs	r1, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	021a      	lsls	r2, r3, #8
 8000e3c:	4b40      	ldr	r3, [pc, #256]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	e018      	b.n	8000e76 <HAL_RCC_OscConfig+0x276>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e44:	4b3e      	ldr	r3, [pc, #248]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	438a      	bics	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e50:	f7ff fb82 	bl	8000558 <HAL_GetTick>
 8000e54:	0003      	movs	r3, r0
 8000e56:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x26c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e5a:	f7ff fb7d 	bl	8000558 <HAL_GetTick>
 8000e5e:	0002      	movs	r2, r0
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e295      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e6c:	4b34      	ldr	r3, [pc, #208]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2204      	movs	r2, #4
 8000e72:	4013      	ands	r3, r2
 8000e74:	d1f1      	bne.n	8000e5a <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2210      	movs	r2, #16
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d100      	bne.n	8000e82 <HAL_RCC_OscConfig+0x282>
 8000e80:	e0a3      	b.n	8000fca <HAL_RCC_OscConfig+0x3ca>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d141      	bne.n	8000f0c <HAL_RCC_OscConfig+0x30c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4013      	ands	r3, r2
 8000e92:	d005      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x2a0>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d101      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e27b      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ea0:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	4a2d      	ldr	r2, [pc, #180]	; (8000f5c <HAL_RCC_OscConfig+0x35c>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eae:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eb4:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	0a19      	lsrs	r1, r3, #8
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	061a      	lsls	r2, r3, #24
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ecc:	0b5b      	lsrs	r3, r3, #13
 8000ece:	3301      	adds	r3, #1
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	0212      	lsls	r2, r2, #8
 8000ed4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	210f      	movs	r1, #15
 8000ede:	400b      	ands	r3, r1
 8000ee0:	491b      	ldr	r1, [pc, #108]	; (8000f50 <HAL_RCC_OscConfig+0x350>)
 8000ee2:	5ccb      	ldrb	r3, [r1, r3]
 8000ee4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <HAL_RCC_OscConfig+0x354>)
 8000ee8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_RCC_OscConfig+0x358>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2513      	movs	r5, #19
 8000ef0:	197c      	adds	r4, r7, r5
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff faea 	bl	80004cc <HAL_InitTick>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000efc:	197b      	adds	r3, r7, r5
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d062      	beq.n	8000fca <HAL_RCC_OscConfig+0x3ca>
        {
          return status;
 8000f04:	2313      	movs	r3, #19
 8000f06:	18fb      	adds	r3, r7, r3
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	e245      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d040      	beq.n	8000f96 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <HAL_RCC_OscConfig+0x340>)
 8000f1a:	2180      	movs	r1, #128	; 0x80
 8000f1c:	0049      	lsls	r1, r1, #1
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f22:	f7ff fb19 	bl	8000558 <HAL_GetTick>
 8000f26:	0003      	movs	r3, r0
 8000f28:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f2a:	e019      	b.n	8000f60 <HAL_RCC_OscConfig+0x360>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fb14 	bl	8000558 <HAL_GetTick>
 8000f30:	0002      	movs	r2, r0
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d912      	bls.n	8000f60 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e22c      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	40021000 	.word	0x40021000
 8000f44:	fffeffff 	.word	0xfffeffff
 8000f48:	fffbffff 	.word	0xfffbffff
 8000f4c:	ffffe0ff 	.word	0xffffe0ff
 8000f50:	08004184 	.word	0x08004184
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f60:	4bc6      	ldr	r3, [pc, #792]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d0df      	beq.n	8000f2c <HAL_RCC_OscConfig+0x32c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f6c:	4bc3      	ldr	r3, [pc, #780]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	4ac3      	ldr	r2, [pc, #780]	; (8001280 <HAL_RCC_OscConfig+0x680>)
 8000f72:	4013      	ands	r3, r2
 8000f74:	0019      	movs	r1, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f7a:	4bc0      	ldr	r3, [pc, #768]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f80:	4bbe      	ldr	r3, [pc, #760]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	0a19      	lsrs	r1, r3, #8
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	061a      	lsls	r2, r3, #24
 8000f8e:	4bbb      	ldr	r3, [pc, #748]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8000f90:	430a      	orrs	r2, r1
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	e019      	b.n	8000fca <HAL_RCC_OscConfig+0x3ca>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f96:	4bb9      	ldr	r3, [pc, #740]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4bb8      	ldr	r3, [pc, #736]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8000f9c:	49b9      	ldr	r1, [pc, #740]	; (8001284 <HAL_RCC_OscConfig+0x684>)
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa2:	f7ff fad9 	bl	8000558 <HAL_GetTick>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0x3be>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fac:	f7ff fad4 	bl	8000558 <HAL_GetTick>
 8000fb0:	0002      	movs	r2, r0
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x3be>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e1ec      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fbe:	4baf      	ldr	r3, [pc, #700]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d1f0      	bne.n	8000fac <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2208      	movs	r2, #8
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d036      	beq.n	8001042 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d019      	beq.n	8001010 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fdc:	4ba7      	ldr	r3, [pc, #668]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8000fde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000fe0:	4ba6      	ldr	r3, [pc, #664]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe8:	f7ff fab6 	bl	8000558 <HAL_GetTick>
 8000fec:	0003      	movs	r3, r0
 8000fee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x404>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ff2:	f7ff fab1 	bl	8000558 <HAL_GetTick>
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e1c9      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001004:	4b9d      	ldr	r3, [pc, #628]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001008:	2202      	movs	r2, #2
 800100a:	4013      	ands	r3, r2
 800100c:	d0f1      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x3f2>
 800100e:	e018      	b.n	8001042 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001010:	4b9a      	ldr	r3, [pc, #616]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001014:	4b99      	ldr	r3, [pc, #612]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001016:	2101      	movs	r1, #1
 8001018:	438a      	bics	r2, r1
 800101a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101c:	f7ff fa9c 	bl	8000558 <HAL_GetTick>
 8001020:	0003      	movs	r3, r0
 8001022:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001026:	f7ff fa97 	bl	8000558 <HAL_GetTick>
 800102a:	0002      	movs	r2, r0
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e1af      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001038:	4b90      	ldr	r3, [pc, #576]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 800103a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800103c:	2202      	movs	r2, #2
 800103e:	4013      	ands	r3, r2
 8001040:	d1f1      	bne.n	8001026 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2204      	movs	r2, #4
 8001048:	4013      	ands	r3, r2
 800104a:	d100      	bne.n	800104e <HAL_RCC_OscConfig+0x44e>
 800104c:	e0af      	b.n	80011ae <HAL_RCC_OscConfig+0x5ae>
  {
    FlagStatus       pwrclkchanged = RESET;
 800104e:	2323      	movs	r3, #35	; 0x23
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001056:	4b89      	ldr	r3, [pc, #548]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	055b      	lsls	r3, r3, #21
 800105e:	4013      	ands	r3, r2
 8001060:	d10a      	bne.n	8001078 <HAL_RCC_OscConfig+0x478>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	4b86      	ldr	r3, [pc, #536]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001066:	4b85      	ldr	r3, [pc, #532]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	0549      	lsls	r1, r1, #21
 800106c:	430a      	orrs	r2, r1
 800106e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001070:	2323      	movs	r3, #35	; 0x23
 8001072:	18fb      	adds	r3, r7, r3
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001078:	4b83      	ldr	r3, [pc, #524]	; (8001288 <HAL_RCC_OscConfig+0x688>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4013      	ands	r3, r2
 8001082:	d11a      	bne.n	80010ba <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001084:	4b80      	ldr	r3, [pc, #512]	; (8001288 <HAL_RCC_OscConfig+0x688>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b7f      	ldr	r3, [pc, #508]	; (8001288 <HAL_RCC_OscConfig+0x688>)
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	0049      	lsls	r1, r1, #1
 800108e:	430a      	orrs	r2, r1
 8001090:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001092:	f7ff fa61 	bl	8000558 <HAL_GetTick>
 8001096:	0003      	movs	r3, r0
 8001098:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800109c:	f7ff fa5c 	bl	8000558 <HAL_GetTick>
 80010a0:	0002      	movs	r2, r0
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	; 0x64
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x4ae>
        {
          return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e174      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ae:	4b76      	ldr	r3, [pc, #472]	; (8001288 <HAL_RCC_OscConfig+0x688>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4013      	ands	r3, r2
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d107      	bne.n	80010d6 <HAL_RCC_OscConfig+0x4d6>
 80010c6:	4b6d      	ldr	r3, [pc, #436]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 80010c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010ca:	4b6c      	ldr	r3, [pc, #432]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	0049      	lsls	r1, r1, #1
 80010d0:	430a      	orrs	r2, r1
 80010d2:	651a      	str	r2, [r3, #80]	; 0x50
 80010d4:	e031      	b.n	800113a <HAL_RCC_OscConfig+0x53a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x4f8>
 80010de:	4b67      	ldr	r3, [pc, #412]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 80010e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010e2:	4b66      	ldr	r3, [pc, #408]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 80010e4:	4967      	ldr	r1, [pc, #412]	; (8001284 <HAL_RCC_OscConfig+0x684>)
 80010e6:	400a      	ands	r2, r1
 80010e8:	651a      	str	r2, [r3, #80]	; 0x50
 80010ea:	4b64      	ldr	r3, [pc, #400]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 80010ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010ee:	4b63      	ldr	r3, [pc, #396]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 80010f0:	4966      	ldr	r1, [pc, #408]	; (800128c <HAL_RCC_OscConfig+0x68c>)
 80010f2:	400a      	ands	r2, r1
 80010f4:	651a      	str	r2, [r3, #80]	; 0x50
 80010f6:	e020      	b.n	800113a <HAL_RCC_OscConfig+0x53a>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	23a0      	movs	r3, #160	; 0xa0
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	429a      	cmp	r2, r3
 8001102:	d10e      	bne.n	8001122 <HAL_RCC_OscConfig+0x522>
 8001104:	4b5d      	ldr	r3, [pc, #372]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001106:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001108:	4b5c      	ldr	r3, [pc, #368]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 800110a:	2180      	movs	r1, #128	; 0x80
 800110c:	00c9      	lsls	r1, r1, #3
 800110e:	430a      	orrs	r2, r1
 8001110:	651a      	str	r2, [r3, #80]	; 0x50
 8001112:	4b5a      	ldr	r3, [pc, #360]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001114:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001116:	4b59      	ldr	r3, [pc, #356]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001118:	2180      	movs	r1, #128	; 0x80
 800111a:	0049      	lsls	r1, r1, #1
 800111c:	430a      	orrs	r2, r1
 800111e:	651a      	str	r2, [r3, #80]	; 0x50
 8001120:	e00b      	b.n	800113a <HAL_RCC_OscConfig+0x53a>
 8001122:	4b56      	ldr	r3, [pc, #344]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001124:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001126:	4b55      	ldr	r3, [pc, #340]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001128:	4956      	ldr	r1, [pc, #344]	; (8001284 <HAL_RCC_OscConfig+0x684>)
 800112a:	400a      	ands	r2, r1
 800112c:	651a      	str	r2, [r3, #80]	; 0x50
 800112e:	4b53      	ldr	r3, [pc, #332]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001130:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001132:	4b52      	ldr	r3, [pc, #328]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001134:	4955      	ldr	r1, [pc, #340]	; (800128c <HAL_RCC_OscConfig+0x68c>)
 8001136:	400a      	ands	r2, r1
 8001138:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d015      	beq.n	800116e <HAL_RCC_OscConfig+0x56e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001142:	f7ff fa09 	bl	8000558 <HAL_GetTick>
 8001146:	0003      	movs	r3, r0
 8001148:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800114a:	e009      	b.n	8001160 <HAL_RCC_OscConfig+0x560>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800114c:	f7ff fa04 	bl	8000558 <HAL_GetTick>
 8001150:	0002      	movs	r2, r0
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	4a4e      	ldr	r2, [pc, #312]	; (8001290 <HAL_RCC_OscConfig+0x690>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x560>
        {
          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e11b      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001160:	4b46      	ldr	r3, [pc, #280]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001162:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4013      	ands	r3, r2
 800116a:	d0ef      	beq.n	800114c <HAL_RCC_OscConfig+0x54c>
 800116c:	e014      	b.n	8001198 <HAL_RCC_OscConfig+0x598>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116e:	f7ff f9f3 	bl	8000558 <HAL_GetTick>
 8001172:	0003      	movs	r3, r0
 8001174:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001176:	e009      	b.n	800118c <HAL_RCC_OscConfig+0x58c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001178:	f7ff f9ee 	bl	8000558 <HAL_GetTick>
 800117c:	0002      	movs	r2, r0
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	4a43      	ldr	r2, [pc, #268]	; (8001290 <HAL_RCC_OscConfig+0x690>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e105      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800118c:	4b3b      	ldr	r3, [pc, #236]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 800118e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4013      	ands	r3, r2
 8001196:	d1ef      	bne.n	8001178 <HAL_RCC_OscConfig+0x578>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001198:	2323      	movs	r3, #35	; 0x23
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d105      	bne.n	80011ae <HAL_RCC_OscConfig+0x5ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011a2:	4b36      	ldr	r3, [pc, #216]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 80011a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011a6:	4b35      	ldr	r3, [pc, #212]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 80011a8:	493a      	ldr	r1, [pc, #232]	; (8001294 <HAL_RCC_OscConfig+0x694>)
 80011aa:	400a      	ands	r2, r1
 80011ac:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2220      	movs	r2, #32
 80011b4:	4013      	ands	r3, r2
 80011b6:	d049      	beq.n	800124c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d026      	beq.n	800120e <HAL_RCC_OscConfig+0x60e>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80011c0:	4b2e      	ldr	r3, [pc, #184]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	4b2d      	ldr	r3, [pc, #180]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 80011c6:	2101      	movs	r1, #1
 80011c8:	430a      	orrs	r2, r1
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	4b2b      	ldr	r3, [pc, #172]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 80011ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d0:	4b2a      	ldr	r3, [pc, #168]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 80011d2:	2101      	movs	r1, #1
 80011d4:	430a      	orrs	r2, r1
 80011d6:	635a      	str	r2, [r3, #52]	; 0x34
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <HAL_RCC_OscConfig+0x698>)
 80011da:	6a1a      	ldr	r2, [r3, #32]
 80011dc:	4b2e      	ldr	r3, [pc, #184]	; (8001298 <HAL_RCC_OscConfig+0x698>)
 80011de:	2180      	movs	r1, #128	; 0x80
 80011e0:	0189      	lsls	r1, r1, #6
 80011e2:	430a      	orrs	r2, r1
 80011e4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e6:	f7ff f9b7 	bl	8000558 <HAL_GetTick>
 80011ea:	0003      	movs	r3, r0
 80011ec:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x602>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011f0:	f7ff f9b2 	bl	8000558 <HAL_GetTick>
 80011f4:	0002      	movs	r2, r0
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x602>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e0ca      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001202:	4b1e      	ldr	r3, [pc, #120]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2202      	movs	r2, #2
 8001208:	4013      	ands	r3, r2
 800120a:	d0f1      	beq.n	80011f0 <HAL_RCC_OscConfig+0x5f0>
 800120c:	e01e      	b.n	800124c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800120e:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001214:	2101      	movs	r1, #1
 8001216:	438a      	bics	r2, r1
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <HAL_RCC_OscConfig+0x698>)
 800121c:	6a1a      	ldr	r2, [r3, #32]
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <HAL_RCC_OscConfig+0x698>)
 8001220:	491e      	ldr	r1, [pc, #120]	; (800129c <HAL_RCC_OscConfig+0x69c>)
 8001222:	400a      	ands	r2, r1
 8001224:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001226:	f7ff f997 	bl	8000558 <HAL_GetTick>
 800122a:	0003      	movs	r3, r0
 800122c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001230:	f7ff f992 	bl	8000558 <HAL_GetTick>
 8001234:	0002      	movs	r2, r0
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e0aa      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2202      	movs	r2, #2
 8001248:	4013      	ands	r3, r2
 800124a:	d1f1      	bne.n	8001230 <HAL_RCC_OscConfig+0x630>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	2b00      	cmp	r3, #0
 8001252:	d100      	bne.n	8001256 <HAL_RCC_OscConfig+0x656>
 8001254:	e09f      	b.n	8001396 <HAL_RCC_OscConfig+0x796>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	2b0c      	cmp	r3, #12
 800125a:	d100      	bne.n	800125e <HAL_RCC_OscConfig+0x65e>
 800125c:	e078      	b.n	8001350 <HAL_RCC_OscConfig+0x750>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	2b02      	cmp	r3, #2
 8001264:	d159      	bne.n	800131a <HAL_RCC_OscConfig+0x71a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <HAL_RCC_OscConfig+0x67c>)
 800126c:	490c      	ldr	r1, [pc, #48]	; (80012a0 <HAL_RCC_OscConfig+0x6a0>)
 800126e:	400a      	ands	r2, r1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff f971 	bl	8000558 <HAL_GetTick>
 8001276:	0003      	movs	r3, r0
 8001278:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800127a:	e01c      	b.n	80012b6 <HAL_RCC_OscConfig+0x6b6>
 800127c:	40021000 	.word	0x40021000
 8001280:	ffff1fff 	.word	0xffff1fff
 8001284:	fffffeff 	.word	0xfffffeff
 8001288:	40007000 	.word	0x40007000
 800128c:	fffffbff 	.word	0xfffffbff
 8001290:	00001388 	.word	0x00001388
 8001294:	efffffff 	.word	0xefffffff
 8001298:	40010000 	.word	0x40010000
 800129c:	ffffdfff 	.word	0xffffdfff
 80012a0:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a4:	f7ff f958 	bl	8000558 <HAL_GetTick>
 80012a8:	0002      	movs	r2, r0
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e070      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <HAL_RCC_OscConfig+0x7a0>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	049b      	lsls	r3, r3, #18
 80012be:	4013      	ands	r3, r2
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x6a4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c2:	4b37      	ldr	r3, [pc, #220]	; (80013a0 <HAL_RCC_OscConfig+0x7a0>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	4a37      	ldr	r2, [pc, #220]	; (80013a4 <HAL_RCC_OscConfig+0x7a4>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	0019      	movs	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012da:	431a      	orrs	r2, r3
 80012dc:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <HAL_RCC_OscConfig+0x7a0>)
 80012de:	430a      	orrs	r2, r1
 80012e0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e2:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <HAL_RCC_OscConfig+0x7a0>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <HAL_RCC_OscConfig+0x7a0>)
 80012e8:	2180      	movs	r1, #128	; 0x80
 80012ea:	0449      	lsls	r1, r1, #17
 80012ec:	430a      	orrs	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff f932 	bl	8000558 <HAL_GetTick>
 80012f4:	0003      	movs	r3, r0
 80012f6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x70c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fa:	f7ff f92d 	bl	8000558 <HAL_GetTick>
 80012fe:	0002      	movs	r2, r0
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x70c>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e045      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <HAL_RCC_OscConfig+0x7a0>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	049b      	lsls	r3, r3, #18
 8001314:	4013      	ands	r3, r2
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x6fa>
 8001318:	e03d      	b.n	8001396 <HAL_RCC_OscConfig+0x796>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <HAL_RCC_OscConfig+0x7a0>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <HAL_RCC_OscConfig+0x7a0>)
 8001320:	4921      	ldr	r1, [pc, #132]	; (80013a8 <HAL_RCC_OscConfig+0x7a8>)
 8001322:	400a      	ands	r2, r1
 8001324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001326:	f7ff f917 	bl	8000558 <HAL_GetTick>
 800132a:	0003      	movs	r3, r0
 800132c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001330:	f7ff f912 	bl	8000558 <HAL_GetTick>
 8001334:	0002      	movs	r2, r0
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e02a      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_RCC_OscConfig+0x7a0>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	049b      	lsls	r3, r3, #18
 800134a:	4013      	ands	r3, r2
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x730>
 800134e:	e022      	b.n	8001396 <HAL_RCC_OscConfig+0x796>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <HAL_RCC_OscConfig+0x75c>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e01d      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <HAL_RCC_OscConfig+0x7a0>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	025b      	lsls	r3, r3, #9
 8001368:	401a      	ands	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136e:	429a      	cmp	r2, r3
 8001370:	d10f      	bne.n	8001392 <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	23f0      	movs	r3, #240	; 0xf0
 8001376:	039b      	lsls	r3, r3, #14
 8001378:	401a      	ands	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137e:	429a      	cmp	r2, r3
 8001380:	d107      	bne.n	8001392 <HAL_RCC_OscConfig+0x792>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	23c0      	movs	r3, #192	; 0xc0
 8001386:	041b      	lsls	r3, r3, #16
 8001388:	401a      	ands	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800138e:	429a      	cmp	r2, r3
 8001390:	d001      	beq.n	8001396 <HAL_RCC_OscConfig+0x796>
        {
          return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	0018      	movs	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	b00a      	add	sp, #40	; 0x28
 800139e:	bdb0      	pop	{r4, r5, r7, pc}
 80013a0:	40021000 	.word	0x40021000
 80013a4:	ff02ffff 	.word	0xff02ffff
 80013a8:	feffffff 	.word	0xfeffffff

080013ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013ac:	b5b0      	push	{r4, r5, r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e129      	b.n	8001614 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c0:	4b96      	ldr	r3, [pc, #600]	; (800161c <HAL_RCC_ClockConfig+0x270>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2201      	movs	r2, #1
 80013c6:	4013      	ands	r3, r2
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d91e      	bls.n	800140c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ce:	4b93      	ldr	r3, [pc, #588]	; (800161c <HAL_RCC_ClockConfig+0x270>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2201      	movs	r2, #1
 80013d4:	4393      	bics	r3, r2
 80013d6:	0019      	movs	r1, r3
 80013d8:	4b90      	ldr	r3, [pc, #576]	; (800161c <HAL_RCC_ClockConfig+0x270>)
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013e0:	f7ff f8ba 	bl	8000558 <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e8:	e009      	b.n	80013fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ea:	f7ff f8b5 	bl	8000558 <HAL_GetTick>
 80013ee:	0002      	movs	r2, r0
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	4a8a      	ldr	r2, [pc, #552]	; (8001620 <HAL_RCC_ClockConfig+0x274>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e10a      	b.n	8001614 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b87      	ldr	r3, [pc, #540]	; (800161c <HAL_RCC_ClockConfig+0x270>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2201      	movs	r2, #1
 8001404:	4013      	ands	r3, r2
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d1ee      	bne.n	80013ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2202      	movs	r2, #2
 8001412:	4013      	ands	r3, r2
 8001414:	d009      	beq.n	800142a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001416:	4b83      	ldr	r3, [pc, #524]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	22f0      	movs	r2, #240	; 0xf0
 800141c:	4393      	bics	r3, r2
 800141e:	0019      	movs	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	4b7f      	ldr	r3, [pc, #508]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 8001426:	430a      	orrs	r2, r1
 8001428:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2201      	movs	r2, #1
 8001430:	4013      	ands	r3, r2
 8001432:	d100      	bne.n	8001436 <HAL_RCC_ClockConfig+0x8a>
 8001434:	e089      	b.n	800154a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800143e:	4b79      	ldr	r3, [pc, #484]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	029b      	lsls	r3, r3, #10
 8001446:	4013      	ands	r3, r2
 8001448:	d120      	bne.n	800148c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e0e2      	b.n	8001614 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d107      	bne.n	8001466 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001456:	4b73      	ldr	r3, [pc, #460]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	049b      	lsls	r3, r3, #18
 800145e:	4013      	ands	r3, r2
 8001460:	d114      	bne.n	800148c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e0d6      	b.n	8001614 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d106      	bne.n	800147c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800146e:	4b6d      	ldr	r3, [pc, #436]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2204      	movs	r2, #4
 8001474:	4013      	ands	r3, r2
 8001476:	d109      	bne.n	800148c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0cb      	b.n	8001614 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800147c:	4b69      	ldr	r3, [pc, #420]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4013      	ands	r3, r2
 8001486:	d101      	bne.n	800148c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0c3      	b.n	8001614 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800148c:	4b65      	ldr	r3, [pc, #404]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2203      	movs	r2, #3
 8001492:	4393      	bics	r3, r2
 8001494:	0019      	movs	r1, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	4b62      	ldr	r3, [pc, #392]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 800149c:	430a      	orrs	r2, r1
 800149e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a0:	f7ff f85a 	bl	8000558 <HAL_GetTick>
 80014a4:	0003      	movs	r3, r0
 80014a6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d111      	bne.n	80014d4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b0:	e009      	b.n	80014c6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b2:	f7ff f851 	bl	8000558 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	4a58      	ldr	r2, [pc, #352]	; (8001620 <HAL_RCC_ClockConfig+0x274>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e0a6      	b.n	8001614 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014c6:	4b57      	ldr	r3, [pc, #348]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	220c      	movs	r2, #12
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d1ef      	bne.n	80014b2 <HAL_RCC_ClockConfig+0x106>
 80014d2:	e03a      	b.n	800154a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d111      	bne.n	8001500 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014dc:	e009      	b.n	80014f2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014de:	f7ff f83b 	bl	8000558 <HAL_GetTick>
 80014e2:	0002      	movs	r2, r0
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	4a4d      	ldr	r2, [pc, #308]	; (8001620 <HAL_RCC_ClockConfig+0x274>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e090      	b.n	8001614 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f2:	4b4c      	ldr	r3, [pc, #304]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	220c      	movs	r2, #12
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b0c      	cmp	r3, #12
 80014fc:	d1ef      	bne.n	80014de <HAL_RCC_ClockConfig+0x132>
 80014fe:	e024      	b.n	800154a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d11b      	bne.n	8001540 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001508:	e009      	b.n	800151e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150a:	f7ff f825 	bl	8000558 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	4a42      	ldr	r2, [pc, #264]	; (8001620 <HAL_RCC_ClockConfig+0x274>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e07a      	b.n	8001614 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800151e:	4b41      	ldr	r3, [pc, #260]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	220c      	movs	r2, #12
 8001524:	4013      	ands	r3, r2
 8001526:	2b04      	cmp	r3, #4
 8001528:	d1ef      	bne.n	800150a <HAL_RCC_ClockConfig+0x15e>
 800152a:	e00e      	b.n	800154a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152c:	f7ff f814 	bl	8000558 <HAL_GetTick>
 8001530:	0002      	movs	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	4a3a      	ldr	r2, [pc, #232]	; (8001620 <HAL_RCC_ClockConfig+0x274>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e069      	b.n	8001614 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001540:	4b38      	ldr	r3, [pc, #224]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	220c      	movs	r2, #12
 8001546:	4013      	ands	r3, r2
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800154a:	4b34      	ldr	r3, [pc, #208]	; (800161c <HAL_RCC_ClockConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2201      	movs	r2, #1
 8001550:	4013      	ands	r3, r2
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d21e      	bcs.n	8001596 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001558:	4b30      	ldr	r3, [pc, #192]	; (800161c <HAL_RCC_ClockConfig+0x270>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2201      	movs	r2, #1
 800155e:	4393      	bics	r3, r2
 8001560:	0019      	movs	r1, r3
 8001562:	4b2e      	ldr	r3, [pc, #184]	; (800161c <HAL_RCC_ClockConfig+0x270>)
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800156a:	f7fe fff5 	bl	8000558 <HAL_GetTick>
 800156e:	0003      	movs	r3, r0
 8001570:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001572:	e009      	b.n	8001588 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001574:	f7fe fff0 	bl	8000558 <HAL_GetTick>
 8001578:	0002      	movs	r2, r0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	4a28      	ldr	r2, [pc, #160]	; (8001620 <HAL_RCC_ClockConfig+0x274>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e045      	b.n	8001614 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_RCC_ClockConfig+0x270>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2201      	movs	r2, #1
 800158e:	4013      	ands	r3, r2
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d1ee      	bne.n	8001574 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2204      	movs	r2, #4
 800159c:	4013      	ands	r3, r2
 800159e:	d009      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4a20      	ldr	r2, [pc, #128]	; (8001628 <HAL_RCC_ClockConfig+0x27c>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	0019      	movs	r1, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 80015b0:	430a      	orrs	r2, r1
 80015b2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2208      	movs	r2, #8
 80015ba:	4013      	ands	r3, r2
 80015bc:	d00a      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	4a1a      	ldr	r2, [pc, #104]	; (800162c <HAL_RCC_ClockConfig+0x280>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	0019      	movs	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	00da      	lsls	r2, r3, #3
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 80015d0:	430a      	orrs	r2, r1
 80015d2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015d4:	f000 f832 	bl	800163c <HAL_RCC_GetSysClockFreq>
 80015d8:	0001      	movs	r1, r0
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_RCC_ClockConfig+0x278>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	091b      	lsrs	r3, r3, #4
 80015e0:	220f      	movs	r2, #15
 80015e2:	4013      	ands	r3, r2
 80015e4:	4a12      	ldr	r2, [pc, #72]	; (8001630 <HAL_RCC_ClockConfig+0x284>)
 80015e6:	5cd3      	ldrb	r3, [r2, r3]
 80015e8:	000a      	movs	r2, r1
 80015ea:	40da      	lsrs	r2, r3
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_RCC_ClockConfig+0x288>)
 80015ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <HAL_RCC_ClockConfig+0x28c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	250b      	movs	r5, #11
 80015f6:	197c      	adds	r4, r7, r5
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7fe ff67 	bl	80004cc <HAL_InitTick>
 80015fe:	0003      	movs	r3, r0
 8001600:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001602:	197b      	adds	r3, r7, r5
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 800160a:	230b      	movs	r3, #11
 800160c:	18fb      	adds	r3, r7, r3
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	e000      	b.n	8001614 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	b004      	add	sp, #16
 800161a:	bdb0      	pop	{r4, r5, r7, pc}
 800161c:	40022000 	.word	0x40022000
 8001620:	00001388 	.word	0x00001388
 8001624:	40021000 	.word	0x40021000
 8001628:	fffff8ff 	.word	0xfffff8ff
 800162c:	ffffc7ff 	.word	0xffffc7ff
 8001630:	08004184 	.word	0x08004184
 8001634:	20000008 	.word	0x20000008
 8001638:	20000000 	.word	0x20000000

0800163c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800163c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163e:	b08f      	sub	sp, #60	; 0x3c
 8001640:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001642:	4b4a      	ldr	r3, [pc, #296]	; (800176c <HAL_RCC_GetSysClockFreq+0x130>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800164a:	230c      	movs	r3, #12
 800164c:	4013      	ands	r3, r2
 800164e:	2b08      	cmp	r3, #8
 8001650:	d00f      	beq.n	8001672 <HAL_RCC_GetSysClockFreq+0x36>
 8001652:	2b0c      	cmp	r3, #12
 8001654:	d010      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0x3c>
 8001656:	2b04      	cmp	r3, #4
 8001658:	d000      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x20>
 800165a:	e073      	b.n	8001744 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800165c:	4b43      	ldr	r3, [pc, #268]	; (800176c <HAL_RCC_GetSysClockFreq+0x130>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2210      	movs	r2, #16
 8001662:	4013      	ands	r3, r2
 8001664:	d002      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001666:	4b42      	ldr	r3, [pc, #264]	; (8001770 <HAL_RCC_GetSysClockFreq+0x134>)
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800166a:	e079      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 800166c:	4b41      	ldr	r3, [pc, #260]	; (8001774 <HAL_RCC_GetSysClockFreq+0x138>)
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001670:	e076      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001676:	e073      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167a:	0c9a      	lsrs	r2, r3, #18
 800167c:	230f      	movs	r3, #15
 800167e:	401a      	ands	r2, r3
 8001680:	4b3e      	ldr	r3, [pc, #248]	; (800177c <HAL_RCC_GetSysClockFreq+0x140>)
 8001682:	5c9b      	ldrb	r3, [r3, r2]
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001688:	0d9a      	lsrs	r2, r3, #22
 800168a:	2303      	movs	r3, #3
 800168c:	4013      	ands	r3, r2
 800168e:	3301      	adds	r3, #1
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001692:	4b36      	ldr	r3, [pc, #216]	; (800176c <HAL_RCC_GetSysClockFreq+0x130>)
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	025b      	lsls	r3, r3, #9
 800169a:	4013      	ands	r3, r2
 800169c:	d019      	beq.n	80016d2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a0:	61bb      	str	r3, [r7, #24]
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	4a34      	ldr	r2, [pc, #208]	; (8001778 <HAL_RCC_GetSysClockFreq+0x13c>)
 80016a8:	2300      	movs	r3, #0
 80016aa:	69b8      	ldr	r0, [r7, #24]
 80016ac:	69f9      	ldr	r1, [r7, #28]
 80016ae:	f7fe fdd7 	bl	8000260 <__aeabi_lmul>
 80016b2:	0003      	movs	r3, r0
 80016b4:	000c      	movs	r4, r1
 80016b6:	0018      	movs	r0, r3
 80016b8:	0021      	movs	r1, r4
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f7fe fdab 	bl	8000220 <__aeabi_uldivmod>
 80016ca:	0003      	movs	r3, r0
 80016cc:	000c      	movs	r4, r1
 80016ce:	637b      	str	r3, [r7, #52]	; 0x34
 80016d0:	e035      	b.n	800173e <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <HAL_RCC_GetSysClockFreq+0x130>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2210      	movs	r2, #16
 80016d8:	4013      	ands	r3, r2
 80016da:	d019      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80016dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	4a22      	ldr	r2, [pc, #136]	; (8001770 <HAL_RCC_GetSysClockFreq+0x134>)
 80016e6:	2300      	movs	r3, #0
 80016e8:	68b8      	ldr	r0, [r7, #8]
 80016ea:	68f9      	ldr	r1, [r7, #12]
 80016ec:	f7fe fdb8 	bl	8000260 <__aeabi_lmul>
 80016f0:	0003      	movs	r3, r0
 80016f2:	000c      	movs	r4, r1
 80016f4:	0018      	movs	r0, r3
 80016f6:	0021      	movs	r1, r4
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f7fe fd8c 	bl	8000220 <__aeabi_uldivmod>
 8001708:	0003      	movs	r3, r0
 800170a:	000c      	movs	r4, r1
 800170c:	637b      	str	r3, [r7, #52]	; 0x34
 800170e:	e016      	b.n	800173e <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001712:	0018      	movs	r0, r3
 8001714:	2300      	movs	r3, #0
 8001716:	0019      	movs	r1, r3
 8001718:	4a16      	ldr	r2, [pc, #88]	; (8001774 <HAL_RCC_GetSysClockFreq+0x138>)
 800171a:	2300      	movs	r3, #0
 800171c:	f7fe fda0 	bl	8000260 <__aeabi_lmul>
 8001720:	0003      	movs	r3, r0
 8001722:	000c      	movs	r4, r1
 8001724:	0018      	movs	r0, r3
 8001726:	0021      	movs	r1, r4
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	001d      	movs	r5, r3
 800172c:	2300      	movs	r3, #0
 800172e:	001e      	movs	r6, r3
 8001730:	002a      	movs	r2, r5
 8001732:	0033      	movs	r3, r6
 8001734:	f7fe fd74 	bl	8000220 <__aeabi_uldivmod>
 8001738:	0003      	movs	r3, r0
 800173a:	000c      	movs	r4, r1
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800173e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001740:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001742:	e00d      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_RCC_GetSysClockFreq+0x130>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	0b5b      	lsrs	r3, r3, #13
 800174a:	2207      	movs	r2, #7
 800174c:	4013      	ands	r3, r2
 800174e:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	3301      	adds	r3, #1
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	0212      	lsls	r2, r2, #8
 8001758:	409a      	lsls	r2, r3
 800175a:	0013      	movs	r3, r2
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800175e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001762:	0018      	movs	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	b00f      	add	sp, #60	; 0x3c
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	40021000 	.word	0x40021000
 8001770:	003d0900 	.word	0x003d0900
 8001774:	00f42400 	.word	0x00f42400
 8001778:	007a1200 	.word	0x007a1200
 800177c:	0800419c 	.word	0x0800419c

08001780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001784:	4b02      	ldr	r3, [pc, #8]	; (8001790 <HAL_RCC_GetHCLKFreq+0x10>)
 8001786:	681b      	ldr	r3, [r3, #0]
}
 8001788:	0018      	movs	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	20000008 	.word	0x20000008

08001794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001798:	f7ff fff2 	bl	8001780 <HAL_RCC_GetHCLKFreq>
 800179c:	0001      	movs	r1, r0
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	2207      	movs	r2, #7
 80017a6:	4013      	ands	r3, r2
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80017aa:	5cd3      	ldrb	r3, [r2, r3]
 80017ac:	40d9      	lsrs	r1, r3
 80017ae:	000b      	movs	r3, r1
}
 80017b0:	0018      	movs	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	40021000 	.word	0x40021000
 80017bc:	08004194 	.word	0x08004194

080017c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017c4:	f7ff ffdc 	bl	8001780 <HAL_RCC_GetHCLKFreq>
 80017c8:	0001      	movs	r1, r0
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	0adb      	lsrs	r3, r3, #11
 80017d0:	2207      	movs	r2, #7
 80017d2:	4013      	ands	r3, r2
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	40d9      	lsrs	r1, r3
 80017da:	000b      	movs	r3, r1
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	40021000 	.word	0x40021000
 80017e8:	08004194 	.word	0x08004194

080017ec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80017f4:	2317      	movs	r3, #23
 80017f6:	18fb      	adds	r3, r7, r3
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2220      	movs	r2, #32
 8001802:	4013      	ands	r3, r2
 8001804:	d100      	bne.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001806:	e0c3      	b.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001808:	4b99      	ldr	r3, [pc, #612]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800180a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	055b      	lsls	r3, r3, #21
 8001810:	4013      	ands	r3, r2
 8001812:	d10a      	bne.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001814:	4b96      	ldr	r3, [pc, #600]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001818:	4b95      	ldr	r3, [pc, #596]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800181a:	2180      	movs	r1, #128	; 0x80
 800181c:	0549      	lsls	r1, r1, #21
 800181e:	430a      	orrs	r2, r1
 8001820:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001822:	2317      	movs	r3, #23
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182a:	4b92      	ldr	r3, [pc, #584]	; (8001a74 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4013      	ands	r3, r2
 8001834:	d11a      	bne.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001836:	4b8f      	ldr	r3, [pc, #572]	; (8001a74 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4b8e      	ldr	r3, [pc, #568]	; (8001a74 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800183c:	2180      	movs	r1, #128	; 0x80
 800183e:	0049      	lsls	r1, r1, #1
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001844:	f7fe fe88 	bl	8000558 <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184c:	e008      	b.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184e:	f7fe fe83 	bl	8000558 <HAL_GetTick>
 8001852:	0002      	movs	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b64      	cmp	r3, #100	; 0x64
 800185a:	d901      	bls.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e102      	b.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001860:	4b84      	ldr	r3, [pc, #528]	; (8001a74 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4013      	ands	r3, r2
 800186a:	d0f0      	beq.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800186c:	4b80      	ldr	r3, [pc, #512]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	23c0      	movs	r3, #192	; 0xc0
 8001872:	039b      	lsls	r3, r3, #14
 8001874:	4013      	ands	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	23c0      	movs	r3, #192	; 0xc0
 800187e:	039b      	lsls	r3, r3, #14
 8001880:	4013      	ands	r3, r2
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	429a      	cmp	r2, r3
 8001886:	d013      	beq.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	23c0      	movs	r3, #192	; 0xc0
 800188e:	029b      	lsls	r3, r3, #10
 8001890:	401a      	ands	r2, r3
 8001892:	23c0      	movs	r3, #192	; 0xc0
 8001894:	029b      	lsls	r3, r3, #10
 8001896:	429a      	cmp	r2, r3
 8001898:	d10a      	bne.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800189a:	4b75      	ldr	r3, [pc, #468]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	029b      	lsls	r3, r3, #10
 80018a2:	401a      	ands	r2, r3
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	029b      	lsls	r3, r3, #10
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d101      	bne.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0da      	b.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80018b0:	4b6f      	ldr	r3, [pc, #444]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80018b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018b4:	23c0      	movs	r3, #192	; 0xc0
 80018b6:	029b      	lsls	r3, r3, #10
 80018b8:	4013      	ands	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d03b      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	23c0      	movs	r3, #192	; 0xc0
 80018c8:	029b      	lsls	r3, r3, #10
 80018ca:	4013      	ands	r3, r2
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d033      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2220      	movs	r2, #32
 80018d8:	4013      	ands	r3, r2
 80018da:	d02e      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80018dc:	4b64      	ldr	r3, [pc, #400]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80018de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e0:	4a65      	ldr	r2, [pc, #404]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018e6:	4b62      	ldr	r3, [pc, #392]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80018e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ea:	4b61      	ldr	r3, [pc, #388]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	0309      	lsls	r1, r1, #12
 80018f0:	430a      	orrs	r2, r1
 80018f2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018f4:	4b5e      	ldr	r3, [pc, #376]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80018f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018f8:	4b5d      	ldr	r3, [pc, #372]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80018fa:	4960      	ldr	r1, [pc, #384]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80018fc:	400a      	ands	r2, r1
 80018fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001900:	4b5b      	ldr	r3, [pc, #364]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4013      	ands	r3, r2
 800190e:	d014      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7fe fe22 	bl	8000558 <HAL_GetTick>
 8001914:	0003      	movs	r3, r0
 8001916:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001918:	e009      	b.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800191a:	f7fe fe1d 	bl	8000558 <HAL_GetTick>
 800191e:	0002      	movs	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	4a56      	ldr	r2, [pc, #344]	; (8001a80 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e09b      	b.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800192e:	4b50      	ldr	r3, [pc, #320]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001930:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4013      	ands	r3, r2
 8001938:	d0ef      	beq.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	23c0      	movs	r3, #192	; 0xc0
 8001940:	029b      	lsls	r3, r3, #10
 8001942:	401a      	ands	r2, r3
 8001944:	23c0      	movs	r3, #192	; 0xc0
 8001946:	029b      	lsls	r3, r3, #10
 8001948:	429a      	cmp	r2, r3
 800194a:	d10c      	bne.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800194c:	4b48      	ldr	r3, [pc, #288]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a4c      	ldr	r2, [pc, #304]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001952:	4013      	ands	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	23c0      	movs	r3, #192	; 0xc0
 800195c:	039b      	lsls	r3, r3, #14
 800195e:	401a      	ands	r2, r3
 8001960:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001962:	430a      	orrs	r2, r1
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	4b42      	ldr	r3, [pc, #264]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001968:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	23c0      	movs	r3, #192	; 0xc0
 8001970:	029b      	lsls	r3, r3, #10
 8001972:	401a      	ands	r2, r3
 8001974:	4b3e      	ldr	r3, [pc, #248]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001976:	430a      	orrs	r2, r1
 8001978:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800197a:	2317      	movs	r3, #23
 800197c:	18fb      	adds	r3, r7, r3
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d105      	bne.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001984:	4b3a      	ldr	r3, [pc, #232]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800198a:	493f      	ldr	r1, [pc, #252]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800198c:	400a      	ands	r2, r1
 800198e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2201      	movs	r2, #1
 8001996:	4013      	ands	r3, r2
 8001998:	d009      	beq.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800199a:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	2203      	movs	r2, #3
 80019a0:	4393      	bics	r3, r2
 80019a2:	0019      	movs	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	4b31      	ldr	r3, [pc, #196]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80019aa:	430a      	orrs	r2, r1
 80019ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2202      	movs	r2, #2
 80019b4:	4013      	ands	r3, r2
 80019b6:	d009      	beq.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80019ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019bc:	220c      	movs	r2, #12
 80019be:	4393      	bics	r3, r2
 80019c0:	0019      	movs	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80019c8:	430a      	orrs	r2, r1
 80019ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2204      	movs	r2, #4
 80019d2:	4013      	ands	r3, r2
 80019d4:	d009      	beq.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80019d6:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	4a2c      	ldr	r2, [pc, #176]	; (8001a8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80019e6:	430a      	orrs	r2, r1
 80019e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2208      	movs	r2, #8
 80019f0:	4013      	ands	r3, r2
 80019f2:	d009      	beq.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	4a25      	ldr	r2, [pc, #148]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	0019      	movs	r1, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695a      	ldr	r2, [r3, #20]
 8001a02:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001a04:	430a      	orrs	r2, r1
 8001a06:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4013      	ands	r3, r2
 8001a12:	d009      	beq.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a18:	4a17      	ldr	r2, [pc, #92]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699a      	ldr	r2, [r3, #24]
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001a24:	430a      	orrs	r2, r1
 8001a26:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2240      	movs	r2, #64	; 0x40
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d009      	beq.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1a      	ldr	r2, [r3, #32]
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001a42:	430a      	orrs	r2, r1
 8001a44:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d009      	beq.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a54:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69da      	ldr	r2, [r3, #28]
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001a60:	430a      	orrs	r2, r1
 8001a62:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b006      	add	sp, #24
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40007000 	.word	0x40007000
 8001a78:	fffcffff 	.word	0xfffcffff
 8001a7c:	fff7ffff 	.word	0xfff7ffff
 8001a80:	00001388 	.word	0x00001388
 8001a84:	ffcfffff 	.word	0xffcfffff
 8001a88:	efffffff 	.word	0xefffffff
 8001a8c:	fffff3ff 	.word	0xfffff3ff
 8001a90:	ffffcfff 	.word	0xffffcfff
 8001a94:	fbffffff 	.word	0xfbffffff
 8001a98:	fff3ffff 	.word	0xfff3ffff

08001a9c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e08e      	b.n	8001bcc <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2221      	movs	r2, #33	; 0x21
 8001ab2:	5c9b      	ldrb	r3, [r3, r2]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d107      	bne.n	8001aca <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2220      	movs	r2, #32
 8001abe:	2100      	movs	r1, #0
 8001ac0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f002 f8f5 	bl	8003cb4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2221      	movs	r2, #33	; 0x21
 8001ace:	2102      	movs	r1, #2
 8001ad0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	22ca      	movs	r2, #202	; 0xca
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2253      	movs	r2, #83	; 0x53
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f000 fbb2 	bl	800224e <RTC_EnterInitMode>
 8001aea:	1e03      	subs	r3, r0, #0
 8001aec:	d009      	beq.n	8001b02 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	22ff      	movs	r2, #255	; 0xff
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2221      	movs	r2, #33	; 0x21
 8001afa:	2104      	movs	r1, #4
 8001afc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e064      	b.n	8001bcc <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4931      	ldr	r1, [pc, #196]	; (8001bd4 <HAL_RTC_Init+0x138>)
 8001b0e:	400a      	ands	r2, r1
 8001b10:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6899      	ldr	r1, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	68d2      	ldr	r2, [r2, #12]
 8001b38:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6919      	ldr	r1, [r3, #16]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	041a      	lsls	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2180      	movs	r1, #128	; 0x80
 8001b5a:	438a      	bics	r2, r1
 8001b5c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2103      	movs	r1, #3
 8001b6a:	438a      	bics	r2, r1
 8001b6c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d113      	bne.n	8001bba <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	0018      	movs	r0, r3
 8001b96:	f000 fb33 	bl	8002200 <HAL_RTC_WaitForSynchro>
 8001b9a:	1e03      	subs	r3, r0, #0
 8001b9c:	d00d      	beq.n	8001bba <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	22ff      	movs	r2, #255	; 0xff
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2221      	movs	r2, #33	; 0x21
 8001baa:	2104      	movs	r1, #4
 8001bac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e008      	b.n	8001bcc <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	22ff      	movs	r2, #255	; 0xff
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2221      	movs	r2, #33	; 0x21
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bca:	2300      	movs	r3, #0
  }
}
 8001bcc:	0018      	movs	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b002      	add	sp, #8
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	ff8fffbf 	.word	0xff8fffbf

08001bd8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2220      	movs	r2, #32
 8001be8:	5c9b      	ldrb	r3, [r3, r2]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_RTC_SetTime+0x1a>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e0ad      	b.n	8001d4e <HAL_RTC_SetTime+0x176>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2221      	movs	r2, #33	; 0x21
 8001bfe:	2102      	movs	r1, #2
 8001c00:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d125      	bne.n	8001c54 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2240      	movs	r2, #64	; 0x40
 8001c10:	4013      	ands	r3, r2
 8001c12:	d102      	bne.n	8001c1a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2200      	movs	r2, #0
 8001c18:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f000 fb3f 	bl	80022a2 <RTC_ByteToBcd2>
 8001c24:	0003      	movs	r3, r0
 8001c26:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	785b      	ldrb	r3, [r3, #1]
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f000 fb38 	bl	80022a2 <RTC_ByteToBcd2>
 8001c32:	0003      	movs	r3, r0
 8001c34:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001c36:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	789b      	ldrb	r3, [r3, #2]
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f000 fb30 	bl	80022a2 <RTC_ByteToBcd2>
 8001c42:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001c44:	0022      	movs	r2, r4
 8001c46:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	78db      	ldrb	r3, [r3, #3]
 8001c4c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e017      	b.n	8001c84 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2240      	movs	r2, #64	; 0x40
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d102      	bne.n	8001c66 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2200      	movs	r2, #0
 8001c64:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	785b      	ldrb	r3, [r3, #1]
 8001c70:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001c72:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001c78:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	78db      	ldrb	r3, [r3, #3]
 8001c7e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001c80:	4313      	orrs	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	22ca      	movs	r2, #202	; 0xca
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2253      	movs	r2, #83	; 0x53
 8001c92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	0018      	movs	r0, r3
 8001c98:	f000 fad9 	bl	800224e <RTC_EnterInitMode>
 8001c9c:	1e03      	subs	r3, r0, #0
 8001c9e:	d00d      	beq.n	8001cbc <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	22ff      	movs	r2, #255	; 0xff
 8001ca6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2221      	movs	r2, #33	; 0x21
 8001cac:	2104      	movs	r1, #4
 8001cae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e048      	b.n	8001d4e <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	4925      	ldr	r1, [pc, #148]	; (8001d58 <HAL_RTC_SetTime+0x180>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4922      	ldr	r1, [pc, #136]	; (8001d5c <HAL_RTC_SetTime+0x184>)
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6899      	ldr	r1, [r3, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2180      	movs	r1, #128	; 0x80
 8001cfc:	438a      	bics	r2, r1
 8001cfe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2220      	movs	r2, #32
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d113      	bne.n	8001d34 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f000 fa76 	bl	8002200 <HAL_RTC_WaitForSynchro>
 8001d14:	1e03      	subs	r3, r0, #0
 8001d16:	d00d      	beq.n	8001d34 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	22ff      	movs	r2, #255	; 0xff
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2221      	movs	r2, #33	; 0x21
 8001d24:	2104      	movs	r1, #4
 8001d26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e00c      	b.n	8001d4e <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	22ff      	movs	r2, #255	; 0xff
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2221      	movs	r2, #33	; 0x21
 8001d40:	2101      	movs	r1, #1
 8001d42:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	2100      	movs	r1, #0
 8001d4a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
  }
}
 8001d4e:	0018      	movs	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b007      	add	sp, #28
 8001d54:	bd90      	pop	{r4, r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	007f7f7f 	.word	0x007f7f7f
 8001d5c:	fffbffff 	.word	0xfffbffff

08001d60 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b087      	sub	sp, #28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	5c9b      	ldrb	r3, [r3, r2]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_RTC_SetDate+0x1a>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e099      	b.n	8001eae <HAL_RTC_SetDate+0x14e>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	2101      	movs	r1, #1
 8001d80:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2221      	movs	r2, #33	; 0x21
 8001d86:	2102      	movs	r1, #2
 8001d88:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10e      	bne.n	8001dae <HAL_RTC_SetDate+0x4e>
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	785b      	ldrb	r3, [r3, #1]
 8001d94:	001a      	movs	r2, r3
 8001d96:	2310      	movs	r3, #16
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d008      	beq.n	8001dae <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	785b      	ldrb	r3, [r3, #1]
 8001da0:	2210      	movs	r2, #16
 8001da2:	4393      	bics	r3, r2
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	330a      	adds	r3, #10
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d11c      	bne.n	8001dee <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	78db      	ldrb	r3, [r3, #3]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f000 fa72 	bl	80022a2 <RTC_ByteToBcd2>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	785b      	ldrb	r3, [r3, #1]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f000 fa6b 	bl	80022a2 <RTC_ByteToBcd2>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001dd0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	789b      	ldrb	r3, [r3, #2]
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f000 fa63 	bl	80022a2 <RTC_ByteToBcd2>
 8001ddc:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001dde:	0022      	movs	r2, r4
 8001de0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	e00e      	b.n	8001e0c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	78db      	ldrb	r3, [r3, #3]
 8001df2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	785b      	ldrb	r3, [r3, #1]
 8001df8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001dfa:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8001e00:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	22ca      	movs	r2, #202	; 0xca
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2253      	movs	r2, #83	; 0x53
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f000 fa15 	bl	800224e <RTC_EnterInitMode>
 8001e24:	1e03      	subs	r3, r0, #0
 8001e26:	d00d      	beq.n	8001e44 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	22ff      	movs	r2, #255	; 0xff
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2221      	movs	r2, #33	; 0x21
 8001e34:	2104      	movs	r1, #4
 8001e36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e034      	b.n	8001eae <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	491b      	ldr	r1, [pc, #108]	; (8001eb8 <HAL_RTC_SetDate+0x158>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2180      	movs	r1, #128	; 0x80
 8001e5c:	438a      	bics	r2, r1
 8001e5e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2220      	movs	r2, #32
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d113      	bne.n	8001e94 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f000 f9c6 	bl	8002200 <HAL_RTC_WaitForSynchro>
 8001e74:	1e03      	subs	r3, r0, #0
 8001e76:	d00d      	beq.n	8001e94 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	22ff      	movs	r2, #255	; 0xff
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2221      	movs	r2, #33	; 0x21
 8001e84:	2104      	movs	r1, #4
 8001e86:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e00c      	b.n	8001eae <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	22ff      	movs	r2, #255	; 0xff
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2221      	movs	r2, #33	; 0x21
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001eac:	2300      	movs	r3, #0
  }
}
 8001eae:	0018      	movs	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b007      	add	sp, #28
 8001eb4:	bd90      	pop	{r4, r7, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	00ffff3f 	.word	0x00ffff3f

08001ebc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8001ebc:	b590      	push	{r4, r7, lr}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	5c9b      	ldrb	r3, [r3, r2]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RTC_SetAlarm_IT+0x1a>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e130      	b.n	8002138 <HAL_RTC_SetAlarm_IT+0x27c>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	2101      	movs	r1, #1
 8001edc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2221      	movs	r2, #33	; 0x21
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d136      	bne.n	8001f5a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2240      	movs	r2, #64	; 0x40
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d102      	bne.n	8001efe <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2200      	movs	r2, #0
 8001efc:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	0018      	movs	r0, r3
 8001f04:	f000 f9cd 	bl	80022a2 <RTC_ByteToBcd2>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	785b      	ldrb	r3, [r3, #1]
 8001f10:	0018      	movs	r0, r3
 8001f12:	f000 f9c6 	bl	80022a2 <RTC_ByteToBcd2>
 8001f16:	0003      	movs	r3, r0
 8001f18:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001f1a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	789b      	ldrb	r3, [r3, #2]
 8001f20:	0018      	movs	r0, r3
 8001f22:	f000 f9be 	bl	80022a2 <RTC_ByteToBcd2>
 8001f26:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001f28:	0022      	movs	r2, r4
 8001f2a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	78db      	ldrb	r3, [r3, #3]
 8001f30:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001f32:	431a      	orrs	r2, r3
 8001f34:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	5c9b      	ldrb	r3, [r3, r2]
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f000 f9b0 	bl	80022a2 <RTC_ByteToBcd2>
 8001f42:	0003      	movs	r3, r0
 8001f44:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001f46:	0022      	movs	r2, r4
 8001f48:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001f4e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61fb      	str	r3, [r7, #28]
 8001f58:	e022      	b.n	8001fa0 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2240      	movs	r2, #64	; 0x40
 8001f62:	4013      	ands	r3, r2
 8001f64:	d102      	bne.n	8001f6c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	785b      	ldrb	r3, [r3, #1]
 8001f76:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001f78:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001f7e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	78db      	ldrb	r3, [r3, #3]
 8001f84:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001f86:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2120      	movs	r1, #32
 8001f8c:	5c5b      	ldrb	r3, [r3, r1]
 8001f8e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001f90:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001f96:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	22ca      	movs	r2, #202	; 0xca
 8001fb2:	625a      	str	r2, [r3, #36]	; 0x24
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2253      	movs	r2, #83	; 0x53
 8001fba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d14e      	bne.n	8002066 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	495b      	ldr	r1, [pc, #364]	; (8002140 <HAL_RTC_SetAlarm_IT+0x284>)
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	22ff      	movs	r2, #255	; 0xff
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4957      	ldr	r1, [pc, #348]	; (8002144 <HAL_RTC_SetAlarm_IT+0x288>)
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001fec:	f7fe fab4 	bl	8000558 <HAL_GetTick>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8001ff4:	e016      	b.n	8002024 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001ff6:	f7fe faaf 	bl	8000558 <HAL_GetTick>
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	1ad2      	subs	r2, r2, r3
 8002000:	23fa      	movs	r3, #250	; 0xfa
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	429a      	cmp	r2, r3
 8002006:	d90d      	bls.n	8002024 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	22ff      	movs	r2, #255	; 0xff
 800200e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2221      	movs	r2, #33	; 0x21
 8002014:	2103      	movs	r1, #3
 8002016:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2220      	movs	r2, #32
 800201c:	2100      	movs	r1, #0
 800201e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e089      	b.n	8002138 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	4013      	ands	r3, r2
 800202e:	d0e2      	beq.n	8001ff6 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	0049      	lsls	r1, r1, #1
 800204e:	430a      	orrs	r2, r1
 8002050:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2180      	movs	r1, #128	; 0x80
 800205e:	0149      	lsls	r1, r1, #5
 8002060:	430a      	orrs	r2, r1
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	e04d      	b.n	8002102 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4935      	ldr	r1, [pc, #212]	; (8002148 <HAL_RTC_SetAlarm_IT+0x28c>)
 8002072:	400a      	ands	r2, r1
 8002074:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	22ff      	movs	r2, #255	; 0xff
 800207e:	401a      	ands	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4931      	ldr	r1, [pc, #196]	; (800214c <HAL_RTC_SetAlarm_IT+0x290>)
 8002086:	430a      	orrs	r2, r1
 8002088:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800208a:	f7fe fa65 	bl	8000558 <HAL_GetTick>
 800208e:	0003      	movs	r3, r0
 8002090:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002092:	e016      	b.n	80020c2 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002094:	f7fe fa60 	bl	8000558 <HAL_GetTick>
 8002098:	0002      	movs	r2, r0
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	1ad2      	subs	r2, r2, r3
 800209e:	23fa      	movs	r3, #250	; 0xfa
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d90d      	bls.n	80020c2 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	22ff      	movs	r2, #255	; 0xff
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2221      	movs	r2, #33	; 0x21
 80020b2:	2103      	movs	r1, #3
 80020b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2220      	movs	r2, #32
 80020ba:	2100      	movs	r1, #0
 80020bc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e03a      	b.n	8002138 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2202      	movs	r2, #2
 80020ca:	4013      	ands	r3, r2
 80020cc:	d0e2      	beq.n	8002094 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	0089      	lsls	r1, r1, #2
 80020ec:	430a      	orrs	r2, r1
 80020ee:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2180      	movs	r1, #128	; 0x80
 80020fc:	0189      	lsls	r1, r1, #6
 80020fe:	430a      	orrs	r2, r1
 8002100:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_RTC_SetAlarm_IT+0x294>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_RTC_SetAlarm_IT+0x294>)
 8002108:	2180      	movs	r1, #128	; 0x80
 800210a:	0289      	lsls	r1, r1, #10
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_RTC_SetAlarm_IT+0x294>)
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <HAL_RTC_SetAlarm_IT+0x294>)
 8002116:	2180      	movs	r1, #128	; 0x80
 8002118:	0289      	lsls	r1, r1, #10
 800211a:	430a      	orrs	r2, r1
 800211c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	22ff      	movs	r2, #255	; 0xff
 8002124:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2221      	movs	r2, #33	; 0x21
 800212a:	2101      	movs	r1, #1
 800212c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2220      	movs	r2, #32
 8002132:	2100      	movs	r1, #0
 8002134:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	b009      	add	sp, #36	; 0x24
 800213e:	bd90      	pop	{r4, r7, pc}
 8002140:	fffffeff 	.word	0xfffffeff
 8002144:	fffffe7f 	.word	0xfffffe7f
 8002148:	fffffdff 	.word	0xfffffdff
 800214c:	fffffd7f 	.word	0xfffffd7f
 8002150:	40010400 	.word	0x40010400

08002154 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	015b      	lsls	r3, r3, #5
 8002166:	4013      	ands	r3, r2
 8002168:	d014      	beq.n	8002194 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4013      	ands	r3, r2
 8002176:	d00d      	beq.n	8002194 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	0018      	movs	r0, r3
 800217c:	f000 f838 	bl	80021f0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	22ff      	movs	r2, #255	; 0xff
 8002188:	401a      	ands	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4915      	ldr	r1, [pc, #84]	; (80021e4 <HAL_RTC_AlarmIRQHandler+0x90>)
 8002190:	430a      	orrs	r2, r1
 8002192:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	019b      	lsls	r3, r3, #6
 800219e:	4013      	ands	r3, r2
 80021a0:	d014      	beq.n	80021cc <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4013      	ands	r3, r2
 80021ae:	d00d      	beq.n	80021cc <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f000 f89e 	bl	80022f4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	22ff      	movs	r2, #255	; 0xff
 80021c0:	401a      	ands	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4908      	ldr	r1, [pc, #32]	; (80021e8 <HAL_RTC_AlarmIRQHandler+0x94>)
 80021c8:	430a      	orrs	r2, r1
 80021ca:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <HAL_RTC_AlarmIRQHandler+0x98>)
 80021ce:	2280      	movs	r2, #128	; 0x80
 80021d0:	0292      	lsls	r2, r2, #10
 80021d2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2221      	movs	r2, #33	; 0x21
 80021d8:	2101      	movs	r1, #1
 80021da:	5499      	strb	r1, [r3, r2]
}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b002      	add	sp, #8
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	fffffe7f 	.word	0xfffffe7f
 80021e8:	fffffd7f 	.word	0xfffffd7f
 80021ec:	40010400 	.word	0x40010400

080021f0 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	21a0      	movs	r1, #160	; 0xa0
 8002214:	438a      	bics	r2, r1
 8002216:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002218:	f7fe f99e 	bl	8000558 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002220:	e00a      	b.n	8002238 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002222:	f7fe f999 	bl	8000558 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1ad2      	subs	r2, r2, r3
 800222c:	23fa      	movs	r3, #250	; 0xfa
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	429a      	cmp	r2, r3
 8002232:	d901      	bls.n	8002238 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e006      	b.n	8002246 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2220      	movs	r2, #32
 8002240:	4013      	ands	r3, r2
 8002242:	d0ee      	beq.n	8002222 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	0018      	movs	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	b004      	add	sp, #16
 800224c:	bd80      	pop	{r7, pc}

0800224e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2240      	movs	r2, #64	; 0x40
 800225e:	4013      	ands	r3, r2
 8002260:	d11a      	bne.n	8002298 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2201      	movs	r2, #1
 8002268:	4252      	negs	r2, r2
 800226a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800226c:	f7fe f974 	bl	8000558 <HAL_GetTick>
 8002270:	0003      	movs	r3, r0
 8002272:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002274:	e00a      	b.n	800228c <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002276:	f7fe f96f 	bl	8000558 <HAL_GetTick>
 800227a:	0002      	movs	r2, r0
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1ad2      	subs	r2, r2, r3
 8002280:	23fa      	movs	r3, #250	; 0xfa
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	429a      	cmp	r2, r3
 8002286:	d901      	bls.n	800228c <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e006      	b.n	800229a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2240      	movs	r2, #64	; 0x40
 8002294:	4013      	ands	r3, r2
 8002296:	d0ee      	beq.n	8002276 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	b004      	add	sp, #16
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	0002      	movs	r2, r0
 80022aa:	1dfb      	adds	r3, r7, #7
 80022ac:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80022b2:	230b      	movs	r3, #11
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	1dfa      	adds	r2, r7, #7
 80022b8:	7812      	ldrb	r2, [r2, #0]
 80022ba:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80022bc:	e008      	b.n	80022d0 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3301      	adds	r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80022c4:	220b      	movs	r2, #11
 80022c6:	18bb      	adds	r3, r7, r2
 80022c8:	18ba      	adds	r2, r7, r2
 80022ca:	7812      	ldrb	r2, [r2, #0]
 80022cc:	3a0a      	subs	r2, #10
 80022ce:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80022d0:	230b      	movs	r3, #11
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b09      	cmp	r3, #9
 80022d8:	d8f1      	bhi.n	80022be <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	230b      	movs	r3, #11
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	b2db      	uxtb	r3, r3
}
 80022ec:	0018      	movs	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b004      	add	sp, #16
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	b002      	add	sp, #8
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e083      	b.n	800241e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	2382      	movs	r3, #130	; 0x82
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	429a      	cmp	r2, r3
 8002328:	d009      	beq.n	800233e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	61da      	str	r2, [r3, #28]
 8002330:	e005      	b.n	800233e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2251      	movs	r2, #81	; 0x51
 8002348:	5c9b      	ldrb	r3, [r3, r2]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d107      	bne.n	8002360 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2250      	movs	r2, #80	; 0x50
 8002354:	2100      	movs	r1, #0
 8002356:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	0018      	movs	r0, r3
 800235c:	f001 fcca 	bl	8003cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2251      	movs	r2, #81	; 0x51
 8002364:	2102      	movs	r1, #2
 8002366:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2140      	movs	r1, #64	; 0x40
 8002374:	438a      	bics	r2, r1
 8002376:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	2382      	movs	r3, #130	; 0x82
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	401a      	ands	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6899      	ldr	r1, [r3, #8]
 8002386:	2384      	movs	r3, #132	; 0x84
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	400b      	ands	r3, r1
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68d9      	ldr	r1, [r3, #12]
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	400b      	ands	r3, r1
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2102      	movs	r1, #2
 80023a0:	400b      	ands	r3, r1
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	2101      	movs	r1, #1
 80023aa:	400b      	ands	r3, r1
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6999      	ldr	r1, [r3, #24]
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	400b      	ands	r3, r1
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	2138      	movs	r1, #56	; 0x38
 80023c0:	400b      	ands	r3, r1
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	2180      	movs	r1, #128	; 0x80
 80023ca:	400b      	ands	r3, r1
 80023cc:	431a      	orrs	r2, r3
 80023ce:	0011      	movs	r1, r2
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	019b      	lsls	r3, r3, #6
 80023d8:	401a      	ands	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	0c1b      	lsrs	r3, r3, #16
 80023e8:	2204      	movs	r2, #4
 80023ea:	4013      	ands	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	2210      	movs	r2, #16
 80023f4:	401a      	ands	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4907      	ldr	r1, [pc, #28]	; (8002428 <HAL_SPI_Init+0x124>)
 800240a:	400a      	ands	r2, r1
 800240c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2251      	movs	r2, #81	; 0x51
 8002418:	2101      	movs	r1, #1
 800241a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	0018      	movs	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	b002      	add	sp, #8
 8002424:	bd80      	pop	{r7, pc}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	fffff7ff 	.word	0xfffff7ff

0800242c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e044      	b.n	80024c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002442:	2b00      	cmp	r3, #0
 8002444:	d107      	bne.n	8002456 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2274      	movs	r2, #116	; 0x74
 800244a:	2100      	movs	r1, #0
 800244c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	0018      	movs	r0, r3
 8002452:	f001 fcb7 	bl	8003dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2224      	movs	r2, #36	; 0x24
 800245a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2101      	movs	r1, #1
 8002468:	438a      	bics	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0018      	movs	r0, r3
 8002470:	f000 fb56 	bl	8002b20 <UART_SetConfig>
 8002474:	0003      	movs	r3, r0
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e024      	b.n	80024c8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	0018      	movs	r0, r3
 800248a:	f000 fe05 	bl	8003098 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	490d      	ldr	r1, [pc, #52]	; (80024d0 <HAL_UART_Init+0xa4>)
 800249a:	400a      	ands	r2, r1
 800249c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	212a      	movs	r1, #42	; 0x2a
 80024aa:	438a      	bics	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2101      	movs	r1, #1
 80024ba:	430a      	orrs	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f000 fe9d 	bl	8003200 <UART_CheckIdleState>
 80024c6:	0003      	movs	r3, r0
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b002      	add	sp, #8
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	ffffb7ff 	.word	0xffffb7ff

080024d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	1dbb      	adds	r3, r7, #6
 80024e2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d000      	beq.n	80024ee <HAL_UART_Transmit+0x1a>
 80024ec:	e095      	b.n	800261a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_UART_Transmit+0x28>
 80024f4:	1dbb      	adds	r3, r7, #6
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e08d      	b.n	800261c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	015b      	lsls	r3, r3, #5
 8002508:	429a      	cmp	r2, r3
 800250a:	d109      	bne.n	8002520 <HAL_UART_Transmit+0x4c>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d105      	bne.n	8002520 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2201      	movs	r2, #1
 8002518:	4013      	ands	r3, r2
 800251a:	d001      	beq.n	8002520 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e07d      	b.n	800261c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2274      	movs	r2, #116	; 0x74
 8002524:	5c9b      	ldrb	r3, [r3, r2]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_UART_Transmit+0x5a>
 800252a:	2302      	movs	r3, #2
 800252c:	e076      	b.n	800261c <HAL_UART_Transmit+0x148>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2274      	movs	r2, #116	; 0x74
 8002532:	2101      	movs	r1, #1
 8002534:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2280      	movs	r2, #128	; 0x80
 800253a:	2100      	movs	r1, #0
 800253c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2221      	movs	r2, #33	; 0x21
 8002542:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002544:	f7fe f808 	bl	8000558 <HAL_GetTick>
 8002548:	0003      	movs	r3, r0
 800254a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1dba      	adds	r2, r7, #6
 8002550:	2150      	movs	r1, #80	; 0x50
 8002552:	8812      	ldrh	r2, [r2, #0]
 8002554:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1dba      	adds	r2, r7, #6
 800255a:	2152      	movs	r1, #82	; 0x52
 800255c:	8812      	ldrh	r2, [r2, #0]
 800255e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	015b      	lsls	r3, r3, #5
 8002568:	429a      	cmp	r2, r3
 800256a:	d108      	bne.n	800257e <HAL_UART_Transmit+0xaa>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d104      	bne.n	800257e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	e003      	b.n	8002586 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2274      	movs	r2, #116	; 0x74
 800258a:	2100      	movs	r1, #0
 800258c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800258e:	e02c      	b.n	80025ea <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	0013      	movs	r3, r2
 800259a:	2200      	movs	r2, #0
 800259c:	2180      	movs	r1, #128	; 0x80
 800259e:	f000 fe79 	bl	8003294 <UART_WaitOnFlagUntilTimeout>
 80025a2:	1e03      	subs	r3, r0, #0
 80025a4:	d001      	beq.n	80025aa <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e038      	b.n	800261c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10b      	bne.n	80025c8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	001a      	movs	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	05d2      	lsls	r2, r2, #23
 80025bc:	0dd2      	lsrs	r2, r2, #23
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	3302      	adds	r3, #2
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	e007      	b.n	80025d8 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	781a      	ldrb	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3301      	adds	r3, #1
 80025d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2252      	movs	r2, #82	; 0x52
 80025dc:	5a9b      	ldrh	r3, [r3, r2]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b299      	uxth	r1, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2252      	movs	r2, #82	; 0x52
 80025e8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2252      	movs	r2, #82	; 0x52
 80025ee:	5a9b      	ldrh	r3, [r3, r2]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1cc      	bne.n	8002590 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	0013      	movs	r3, r2
 8002600:	2200      	movs	r2, #0
 8002602:	2140      	movs	r1, #64	; 0x40
 8002604:	f000 fe46 	bl	8003294 <UART_WaitOnFlagUntilTimeout>
 8002608:	1e03      	subs	r3, r0, #0
 800260a:	d001      	beq.n	8002610 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e005      	b.n	800261c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e000      	b.n	800261c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800261a:	2302      	movs	r3, #2
  }
}
 800261c:	0018      	movs	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	b008      	add	sp, #32
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	1dbb      	adds	r3, r7, #6
 8002630:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002636:	2b20      	cmp	r3, #32
 8002638:	d144      	bne.n	80026c4 <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_UART_Receive_IT+0x24>
 8002640:	1dbb      	adds	r3, r7, #6
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e03c      	b.n	80026c6 <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	015b      	lsls	r3, r3, #5
 8002654:	429a      	cmp	r2, r3
 8002656:	d109      	bne.n	800266c <HAL_UART_Receive_IT+0x48>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2201      	movs	r2, #1
 8002664:	4013      	ands	r3, r2
 8002666:	d001      	beq.n	800266c <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e02c      	b.n	80026c6 <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2274      	movs	r2, #116	; 0x74
 8002670:	5c9b      	ldrb	r3, [r3, r2]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_UART_Receive_IT+0x56>
 8002676:	2302      	movs	r3, #2
 8002678:	e025      	b.n	80026c6 <HAL_UART_Receive_IT+0xa2>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2274      	movs	r2, #116	; 0x74
 800267e:	2101      	movs	r1, #1
 8002680:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a10      	ldr	r2, [pc, #64]	; (80026d0 <HAL_UART_Receive_IT+0xac>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00f      	beq.n	80026b2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	041b      	lsls	r3, r3, #16
 800269c:	4013      	ands	r3, r2
 800269e:	d008      	beq.n	80026b2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2180      	movs	r1, #128	; 0x80
 80026ac:	04c9      	lsls	r1, r1, #19
 80026ae:	430a      	orrs	r2, r1
 80026b0:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80026b2:	1dbb      	adds	r3, r7, #6
 80026b4:	881a      	ldrh	r2, [r3, #0]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 fe68 	bl	8003390 <UART_Start_Receive_IT>
 80026c0:	0003      	movs	r3, r0
 80026c2:	e000      	b.n	80026c6 <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	0018      	movs	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b004      	add	sp, #16
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	40004800 	.word	0x40004800

080026d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	4ab6      	ldr	r2, [pc, #728]	; (80029d0 <HAL_UART_IRQHandler+0x2fc>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d112      	bne.n	8002728 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	2220      	movs	r2, #32
 8002706:	4013      	ands	r3, r2
 8002708:	d00e      	beq.n	8002728 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2220      	movs	r2, #32
 800270e:	4013      	ands	r3, r2
 8002710:	d00a      	beq.n	8002728 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002716:	2b00      	cmp	r3, #0
 8002718:	d100      	bne.n	800271c <HAL_UART_IRQHandler+0x48>
 800271a:	e1d6      	b.n	8002aca <HAL_UART_IRQHandler+0x3f6>
      {
        huart->RxISR(huart);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	0010      	movs	r0, r2
 8002724:	4798      	blx	r3
      }
      return;
 8002726:	e1d0      	b.n	8002aca <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d100      	bne.n	8002730 <HAL_UART_IRQHandler+0x5c>
 800272e:	e0d9      	b.n	80028e4 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2201      	movs	r2, #1
 8002734:	4013      	ands	r3, r2
 8002736:	d104      	bne.n	8002742 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	4aa6      	ldr	r2, [pc, #664]	; (80029d4 <HAL_UART_IRQHandler+0x300>)
 800273c:	4013      	ands	r3, r2
 800273e:	d100      	bne.n	8002742 <HAL_UART_IRQHandler+0x6e>
 8002740:	e0d0      	b.n	80028e4 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	2201      	movs	r2, #1
 8002746:	4013      	ands	r3, r2
 8002748:	d010      	beq.n	800276c <HAL_UART_IRQHandler+0x98>
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4013      	ands	r3, r2
 8002752:	d00b      	beq.n	800276c <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2201      	movs	r2, #1
 800275a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2280      	movs	r2, #128	; 0x80
 8002760:	589b      	ldr	r3, [r3, r2]
 8002762:	2201      	movs	r2, #1
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2180      	movs	r1, #128	; 0x80
 800276a:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2202      	movs	r2, #2
 8002770:	4013      	ands	r3, r2
 8002772:	d00f      	beq.n	8002794 <HAL_UART_IRQHandler+0xc0>
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	2201      	movs	r2, #1
 8002778:	4013      	ands	r3, r2
 800277a:	d00b      	beq.n	8002794 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2202      	movs	r2, #2
 8002782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2280      	movs	r2, #128	; 0x80
 8002788:	589b      	ldr	r3, [r3, r2]
 800278a:	2204      	movs	r2, #4
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2204      	movs	r2, #4
 8002798:	4013      	ands	r3, r2
 800279a:	d00f      	beq.n	80027bc <HAL_UART_IRQHandler+0xe8>
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2201      	movs	r2, #1
 80027a0:	4013      	ands	r3, r2
 80027a2:	d00b      	beq.n	80027bc <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2204      	movs	r2, #4
 80027aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2280      	movs	r2, #128	; 0x80
 80027b0:	589b      	ldr	r3, [r3, r2]
 80027b2:	2202      	movs	r2, #2
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2208      	movs	r2, #8
 80027c0:	4013      	ands	r3, r2
 80027c2:	d013      	beq.n	80027ec <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2220      	movs	r2, #32
 80027c8:	4013      	ands	r3, r2
 80027ca:	d103      	bne.n	80027d4 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2201      	movs	r2, #1
 80027d0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027d2:	d00b      	beq.n	80027ec <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2208      	movs	r2, #8
 80027da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2280      	movs	r2, #128	; 0x80
 80027e0:	589b      	ldr	r3, [r3, r2]
 80027e2:	2208      	movs	r2, #8
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	4013      	ands	r3, r2
 80027f4:	d011      	beq.n	800281a <HAL_UART_IRQHandler+0x146>
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	04db      	lsls	r3, r3, #19
 80027fc:	4013      	ands	r3, r2
 80027fe:	d00c      	beq.n	800281a <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2280      	movs	r2, #128	; 0x80
 8002806:	0112      	lsls	r2, r2, #4
 8002808:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2280      	movs	r2, #128	; 0x80
 800280e:	589b      	ldr	r3, [r3, r2]
 8002810:	2220      	movs	r2, #32
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2180      	movs	r1, #128	; 0x80
 8002818:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2280      	movs	r2, #128	; 0x80
 800281e:	589b      	ldr	r3, [r3, r2]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d100      	bne.n	8002826 <HAL_UART_IRQHandler+0x152>
 8002824:	e153      	b.n	8002ace <HAL_UART_IRQHandler+0x3fa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	2220      	movs	r2, #32
 800282a:	4013      	ands	r3, r2
 800282c:	d00c      	beq.n	8002848 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2220      	movs	r2, #32
 8002832:	4013      	ands	r3, r2
 8002834:	d008      	beq.n	8002848 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800283a:	2b00      	cmp	r3, #0
 800283c:	d004      	beq.n	8002848 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	0010      	movs	r0, r2
 8002846:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	589b      	ldr	r3, [r3, r2]
 800284e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2240      	movs	r2, #64	; 0x40
 8002858:	4013      	ands	r3, r2
 800285a:	2b40      	cmp	r3, #64	; 0x40
 800285c:	d003      	beq.n	8002866 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2228      	movs	r2, #40	; 0x28
 8002862:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002864:	d033      	beq.n	80028ce <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	0018      	movs	r0, r3
 800286a:	f000 fe1f 	bl	80034ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2240      	movs	r2, #64	; 0x40
 8002876:	4013      	ands	r3, r2
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d123      	bne.n	80028c4 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2140      	movs	r1, #64	; 0x40
 8002888:	438a      	bics	r2, r1
 800288a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	2b00      	cmp	r3, #0
 8002892:	d012      	beq.n	80028ba <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	4a4f      	ldr	r2, [pc, #316]	; (80029d8 <HAL_UART_IRQHandler+0x304>)
 800289a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7fd ffa3 	bl	80007ec <HAL_DMA_Abort_IT>
 80028a6:	1e03      	subs	r3, r0, #0
 80028a8:	d01a      	beq.n	80028e0 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	0018      	movs	r0, r3
 80028b6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b8:	e012      	b.n	80028e0 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 f91b 	bl	8002af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c2:	e00d      	b.n	80028e0 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	0018      	movs	r0, r3
 80028c8:	f000 f916 	bl	8002af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028cc:	e008      	b.n	80028e0 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 f911 	bl	8002af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	2100      	movs	r1, #0
 80028dc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80028de:	e0f6      	b.n	8002ace <HAL_UART_IRQHandler+0x3fa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e0:	46c0      	nop			; (mov r8, r8)
    return;
 80028e2:	e0f4      	b.n	8002ace <HAL_UART_IRQHandler+0x3fa>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d000      	beq.n	80028ee <HAL_UART_IRQHandler+0x21a>
 80028ec:	e0b9      	b.n	8002a62 <HAL_UART_IRQHandler+0x38e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	2210      	movs	r2, #16
 80028f2:	4013      	ands	r3, r2
 80028f4:	d100      	bne.n	80028f8 <HAL_UART_IRQHandler+0x224>
 80028f6:	e0b4      	b.n	8002a62 <HAL_UART_IRQHandler+0x38e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	2210      	movs	r2, #16
 80028fc:	4013      	ands	r3, r2
 80028fe:	d100      	bne.n	8002902 <HAL_UART_IRQHandler+0x22e>
 8002900:	e0af      	b.n	8002a62 <HAL_UART_IRQHandler+0x38e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2210      	movs	r2, #16
 8002908:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2240      	movs	r2, #64	; 0x40
 8002912:	4013      	ands	r3, r2
 8002914:	2b40      	cmp	r3, #64	; 0x40
 8002916:	d163      	bne.n	80029e0 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	2108      	movs	r1, #8
 8002922:	187b      	adds	r3, r7, r1
 8002924:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8002926:	187b      	adds	r3, r7, r1
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d100      	bne.n	8002930 <HAL_UART_IRQHandler+0x25c>
 800292e:	e0d0      	b.n	8002ad2 <HAL_UART_IRQHandler+0x3fe>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2258      	movs	r2, #88	; 0x58
 8002934:	5a9b      	ldrh	r3, [r3, r2]
 8002936:	2208      	movs	r2, #8
 8002938:	18ba      	adds	r2, r7, r2
 800293a:	8812      	ldrh	r2, [r2, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d300      	bcc.n	8002942 <HAL_UART_IRQHandler+0x26e>
 8002940:	e0c7      	b.n	8002ad2 <HAL_UART_IRQHandler+0x3fe>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2208      	movs	r2, #8
 8002946:	18ba      	adds	r2, r7, r2
 8002948:	215a      	movs	r1, #90	; 0x5a
 800294a:	8812      	ldrh	r2, [r2, #0]
 800294c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2220      	movs	r2, #32
 8002958:	4013      	ands	r3, r2
 800295a:	d12a      	bne.n	80029b2 <HAL_UART_IRQHandler+0x2de>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	491d      	ldr	r1, [pc, #116]	; (80029dc <HAL_UART_IRQHandler+0x308>)
 8002968:	400a      	ands	r2, r1
 800296a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2101      	movs	r1, #1
 8002978:	438a      	bics	r2, r1
 800297a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2140      	movs	r1, #64	; 0x40
 8002988:	438a      	bics	r2, r1
 800298a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2110      	movs	r1, #16
 80029a4:	438a      	bics	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	0018      	movs	r0, r3
 80029ae:	f7fd fedd 	bl	800076c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2258      	movs	r2, #88	; 0x58
 80029b6:	5a9a      	ldrh	r2, [r3, r2]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	215a      	movs	r1, #90	; 0x5a
 80029bc:	5a5b      	ldrh	r3, [r3, r1]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	0011      	movs	r1, r2
 80029c8:	0018      	movs	r0, r3
 80029ca:	f000 f89d 	bl	8002b08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80029ce:	e080      	b.n	8002ad2 <HAL_UART_IRQHandler+0x3fe>
 80029d0:	0000080f 	.word	0x0000080f
 80029d4:	04000120 	.word	0x04000120
 80029d8:	0800350d 	.word	0x0800350d
 80029dc:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2258      	movs	r2, #88	; 0x58
 80029e4:	5a99      	ldrh	r1, [r3, r2]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	225a      	movs	r2, #90	; 0x5a
 80029ea:	5a9b      	ldrh	r3, [r3, r2]
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	230a      	movs	r3, #10
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	1a8a      	subs	r2, r1, r2
 80029f4:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	225a      	movs	r2, #90	; 0x5a
 80029fa:	5a9b      	ldrh	r3, [r3, r2]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d100      	bne.n	8002a04 <HAL_UART_IRQHandler+0x330>
 8002a02:	e068      	b.n	8002ad6 <HAL_UART_IRQHandler+0x402>
          &&(nb_rx_data > 0U) )
 8002a04:	230a      	movs	r3, #10
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d063      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x402>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4932      	ldr	r1, [pc, #200]	; (8002ae4 <HAL_UART_IRQHandler+0x410>)
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2101      	movs	r1, #1
 8002a2a:	438a      	bics	r2, r1
 8002a2c:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2220      	movs	r2, #32
 8002a32:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2110      	movs	r1, #16
 8002a4c:	438a      	bics	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a50:	230a      	movs	r3, #10
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	881a      	ldrh	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	0011      	movs	r1, r2
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 f854 	bl	8002b08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002a60:	e039      	b.n	8002ad6 <HAL_UART_IRQHandler+0x402>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	035b      	lsls	r3, r3, #13
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d00e      	beq.n	8002a8a <HAL_UART_IRQHandler+0x3b6>
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	03db      	lsls	r3, r3, #15
 8002a72:	4013      	ands	r3, r2
 8002a74:	d009      	beq.n	8002a8a <HAL_UART_IRQHandler+0x3b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	0352      	lsls	r2, r2, #13
 8002a7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 fe60 	bl	8003748 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a88:	e028      	b.n	8002adc <HAL_UART_IRQHandler+0x408>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	2280      	movs	r2, #128	; 0x80
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d00d      	beq.n	8002aae <HAL_UART_IRQHandler+0x3da>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2280      	movs	r2, #128	; 0x80
 8002a96:	4013      	ands	r3, r2
 8002a98:	d009      	beq.n	8002aae <HAL_UART_IRQHandler+0x3da>
  {
    if (huart->TxISR != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d01b      	beq.n	8002ada <HAL_UART_IRQHandler+0x406>
    {
      huart->TxISR(huart);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	0010      	movs	r0, r2
 8002aaa:	4798      	blx	r3
    }
    return;
 8002aac:	e015      	b.n	8002ada <HAL_UART_IRQHandler+0x406>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	2240      	movs	r2, #64	; 0x40
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d012      	beq.n	8002adc <HAL_UART_IRQHandler+0x408>
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	2240      	movs	r2, #64	; 0x40
 8002aba:	4013      	ands	r3, r2
 8002abc:	d00e      	beq.n	8002adc <HAL_UART_IRQHandler+0x408>
  {
    UART_EndTransmit_IT(huart);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f000 fd3a 	bl	800353a <UART_EndTransmit_IT>
    return;
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	e008      	b.n	8002adc <HAL_UART_IRQHandler+0x408>
      return;
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	e006      	b.n	8002adc <HAL_UART_IRQHandler+0x408>
    return;
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	e004      	b.n	8002adc <HAL_UART_IRQHandler+0x408>
      return;
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	e002      	b.n	8002adc <HAL_UART_IRQHandler+0x408>
      return;
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	e000      	b.n	8002adc <HAL_UART_IRQHandler+0x408>
    return;
 8002ada:	46c0      	nop			; (mov r8, r8)
  }

}
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b008      	add	sp, #32
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	fffffedf 	.word	0xfffffedf

08002ae8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b002      	add	sp, #8
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b002      	add	sp, #8
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	000a      	movs	r2, r1
 8002b12:	1cbb      	adds	r3, r7, #2
 8002b14:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b002      	add	sp, #8
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b20:	b5b0      	push	{r4, r5, r7, lr}
 8002b22:	b08e      	sub	sp, #56	; 0x38
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b28:	231a      	movs	r3, #26
 8002b2a:	2218      	movs	r2, #24
 8002b2c:	4694      	mov	ip, r2
 8002b2e:	44bc      	add	ip, r7
 8002b30:	4463      	add	r3, ip
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4acb      	ldr	r2, [pc, #812]	; (8002e84 <UART_SetConfig+0x364>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	0019      	movs	r1, r3
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b60:	430a      	orrs	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4ac7      	ldr	r2, [pc, #796]	; (8002e88 <UART_SetConfig+0x368>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	0019      	movs	r1, r3
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4ac1      	ldr	r2, [pc, #772]	; (8002e8c <UART_SetConfig+0x36c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d004      	beq.n	8002b96 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b92:	4313      	orrs	r3, r2
 8002b94:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4abc      	ldr	r2, [pc, #752]	; (8002e90 <UART_SetConfig+0x370>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4ab8      	ldr	r2, [pc, #736]	; (8002e94 <UART_SetConfig+0x374>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d134      	bne.n	8002c20 <UART_SetConfig+0x100>
 8002bb6:	4bb8      	ldr	r3, [pc, #736]	; (8002e98 <UART_SetConfig+0x378>)
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bba:	2203      	movs	r2, #3
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d015      	beq.n	8002bee <UART_SetConfig+0xce>
 8002bc2:	d304      	bcc.n	8002bce <UART_SetConfig+0xae>
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d00a      	beq.n	8002bde <UART_SetConfig+0xbe>
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d018      	beq.n	8002bfe <UART_SetConfig+0xde>
 8002bcc:	e01f      	b.n	8002c0e <UART_SetConfig+0xee>
 8002bce:	231b      	movs	r3, #27
 8002bd0:	2218      	movs	r2, #24
 8002bd2:	4694      	mov	ip, r2
 8002bd4:	44bc      	add	ip, r7
 8002bd6:	4463      	add	r3, ip
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
 8002bdc:	e0c5      	b.n	8002d6a <UART_SetConfig+0x24a>
 8002bde:	231b      	movs	r3, #27
 8002be0:	2218      	movs	r2, #24
 8002be2:	4694      	mov	ip, r2
 8002be4:	44bc      	add	ip, r7
 8002be6:	4463      	add	r3, ip
 8002be8:	2202      	movs	r2, #2
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e0bd      	b.n	8002d6a <UART_SetConfig+0x24a>
 8002bee:	231b      	movs	r3, #27
 8002bf0:	2218      	movs	r2, #24
 8002bf2:	4694      	mov	ip, r2
 8002bf4:	44bc      	add	ip, r7
 8002bf6:	4463      	add	r3, ip
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	701a      	strb	r2, [r3, #0]
 8002bfc:	e0b5      	b.n	8002d6a <UART_SetConfig+0x24a>
 8002bfe:	231b      	movs	r3, #27
 8002c00:	2218      	movs	r2, #24
 8002c02:	4694      	mov	ip, r2
 8002c04:	44bc      	add	ip, r7
 8002c06:	4463      	add	r3, ip
 8002c08:	2208      	movs	r2, #8
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e0ad      	b.n	8002d6a <UART_SetConfig+0x24a>
 8002c0e:	231b      	movs	r3, #27
 8002c10:	2218      	movs	r2, #24
 8002c12:	4694      	mov	ip, r2
 8002c14:	44bc      	add	ip, r7
 8002c16:	4463      	add	r3, ip
 8002c18:	2210      	movs	r2, #16
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	46c0      	nop			; (mov r8, r8)
 8002c1e:	e0a4      	b.n	8002d6a <UART_SetConfig+0x24a>
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a9d      	ldr	r2, [pc, #628]	; (8002e9c <UART_SetConfig+0x37c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d137      	bne.n	8002c9a <UART_SetConfig+0x17a>
 8002c2a:	4b9b      	ldr	r3, [pc, #620]	; (8002e98 <UART_SetConfig+0x378>)
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2e:	220c      	movs	r2, #12
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d018      	beq.n	8002c68 <UART_SetConfig+0x148>
 8002c36:	d802      	bhi.n	8002c3e <UART_SetConfig+0x11e>
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <UART_SetConfig+0x128>
 8002c3c:	e024      	b.n	8002c88 <UART_SetConfig+0x168>
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d00a      	beq.n	8002c58 <UART_SetConfig+0x138>
 8002c42:	2b0c      	cmp	r3, #12
 8002c44:	d018      	beq.n	8002c78 <UART_SetConfig+0x158>
 8002c46:	e01f      	b.n	8002c88 <UART_SetConfig+0x168>
 8002c48:	231b      	movs	r3, #27
 8002c4a:	2218      	movs	r2, #24
 8002c4c:	4694      	mov	ip, r2
 8002c4e:	44bc      	add	ip, r7
 8002c50:	4463      	add	r3, ip
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	e088      	b.n	8002d6a <UART_SetConfig+0x24a>
 8002c58:	231b      	movs	r3, #27
 8002c5a:	2218      	movs	r2, #24
 8002c5c:	4694      	mov	ip, r2
 8002c5e:	44bc      	add	ip, r7
 8002c60:	4463      	add	r3, ip
 8002c62:	2202      	movs	r2, #2
 8002c64:	701a      	strb	r2, [r3, #0]
 8002c66:	e080      	b.n	8002d6a <UART_SetConfig+0x24a>
 8002c68:	231b      	movs	r3, #27
 8002c6a:	2218      	movs	r2, #24
 8002c6c:	4694      	mov	ip, r2
 8002c6e:	44bc      	add	ip, r7
 8002c70:	4463      	add	r3, ip
 8002c72:	2204      	movs	r2, #4
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e078      	b.n	8002d6a <UART_SetConfig+0x24a>
 8002c78:	231b      	movs	r3, #27
 8002c7a:	2218      	movs	r2, #24
 8002c7c:	4694      	mov	ip, r2
 8002c7e:	44bc      	add	ip, r7
 8002c80:	4463      	add	r3, ip
 8002c82:	2208      	movs	r2, #8
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	e070      	b.n	8002d6a <UART_SetConfig+0x24a>
 8002c88:	231b      	movs	r3, #27
 8002c8a:	2218      	movs	r2, #24
 8002c8c:	4694      	mov	ip, r2
 8002c8e:	44bc      	add	ip, r7
 8002c90:	4463      	add	r3, ip
 8002c92:	2210      	movs	r2, #16
 8002c94:	701a      	strb	r2, [r3, #0]
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	e067      	b.n	8002d6a <UART_SetConfig+0x24a>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a80      	ldr	r2, [pc, #512]	; (8002ea0 <UART_SetConfig+0x380>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d107      	bne.n	8002cb4 <UART_SetConfig+0x194>
 8002ca4:	231b      	movs	r3, #27
 8002ca6:	2218      	movs	r2, #24
 8002ca8:	4694      	mov	ip, r2
 8002caa:	44bc      	add	ip, r7
 8002cac:	4463      	add	r3, ip
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e05a      	b.n	8002d6a <UART_SetConfig+0x24a>
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a7a      	ldr	r2, [pc, #488]	; (8002ea4 <UART_SetConfig+0x384>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d107      	bne.n	8002cce <UART_SetConfig+0x1ae>
 8002cbe:	231b      	movs	r3, #27
 8002cc0:	2218      	movs	r2, #24
 8002cc2:	4694      	mov	ip, r2
 8002cc4:	44bc      	add	ip, r7
 8002cc6:	4463      	add	r3, ip
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
 8002ccc:	e04d      	b.n	8002d6a <UART_SetConfig+0x24a>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a6e      	ldr	r2, [pc, #440]	; (8002e8c <UART_SetConfig+0x36c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d141      	bne.n	8002d5c <UART_SetConfig+0x23c>
 8002cd8:	4b6f      	ldr	r3, [pc, #444]	; (8002e98 <UART_SetConfig+0x378>)
 8002cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cdc:	23c0      	movs	r3, #192	; 0xc0
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2280      	movs	r2, #128	; 0x80
 8002ce4:	00d2      	lsls	r2, r2, #3
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01f      	beq.n	8002d2a <UART_SetConfig+0x20a>
 8002cea:	2280      	movs	r2, #128	; 0x80
 8002cec:	00d2      	lsls	r2, r2, #3
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d802      	bhi.n	8002cf8 <UART_SetConfig+0x1d8>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d009      	beq.n	8002d0a <UART_SetConfig+0x1ea>
 8002cf6:	e028      	b.n	8002d4a <UART_SetConfig+0x22a>
 8002cf8:	2280      	movs	r2, #128	; 0x80
 8002cfa:	0112      	lsls	r2, r2, #4
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00c      	beq.n	8002d1a <UART_SetConfig+0x1fa>
 8002d00:	22c0      	movs	r2, #192	; 0xc0
 8002d02:	0112      	lsls	r2, r2, #4
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d018      	beq.n	8002d3a <UART_SetConfig+0x21a>
 8002d08:	e01f      	b.n	8002d4a <UART_SetConfig+0x22a>
 8002d0a:	231b      	movs	r3, #27
 8002d0c:	2218      	movs	r2, #24
 8002d0e:	4694      	mov	ip, r2
 8002d10:	44bc      	add	ip, r7
 8002d12:	4463      	add	r3, ip
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
 8002d18:	e027      	b.n	8002d6a <UART_SetConfig+0x24a>
 8002d1a:	231b      	movs	r3, #27
 8002d1c:	2218      	movs	r2, #24
 8002d1e:	4694      	mov	ip, r2
 8002d20:	44bc      	add	ip, r7
 8002d22:	4463      	add	r3, ip
 8002d24:	2202      	movs	r2, #2
 8002d26:	701a      	strb	r2, [r3, #0]
 8002d28:	e01f      	b.n	8002d6a <UART_SetConfig+0x24a>
 8002d2a:	231b      	movs	r3, #27
 8002d2c:	2218      	movs	r2, #24
 8002d2e:	4694      	mov	ip, r2
 8002d30:	44bc      	add	ip, r7
 8002d32:	4463      	add	r3, ip
 8002d34:	2204      	movs	r2, #4
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	e017      	b.n	8002d6a <UART_SetConfig+0x24a>
 8002d3a:	231b      	movs	r3, #27
 8002d3c:	2218      	movs	r2, #24
 8002d3e:	4694      	mov	ip, r2
 8002d40:	44bc      	add	ip, r7
 8002d42:	4463      	add	r3, ip
 8002d44:	2208      	movs	r2, #8
 8002d46:	701a      	strb	r2, [r3, #0]
 8002d48:	e00f      	b.n	8002d6a <UART_SetConfig+0x24a>
 8002d4a:	231b      	movs	r3, #27
 8002d4c:	2218      	movs	r2, #24
 8002d4e:	4694      	mov	ip, r2
 8002d50:	44bc      	add	ip, r7
 8002d52:	4463      	add	r3, ip
 8002d54:	2210      	movs	r2, #16
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	e006      	b.n	8002d6a <UART_SetConfig+0x24a>
 8002d5c:	231b      	movs	r3, #27
 8002d5e:	2218      	movs	r2, #24
 8002d60:	4694      	mov	ip, r2
 8002d62:	44bc      	add	ip, r7
 8002d64:	4463      	add	r3, ip
 8002d66:	2210      	movs	r2, #16
 8002d68:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a47      	ldr	r2, [pc, #284]	; (8002e8c <UART_SetConfig+0x36c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d000      	beq.n	8002d76 <UART_SetConfig+0x256>
 8002d74:	e0a0      	b.n	8002eb8 <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d76:	231b      	movs	r3, #27
 8002d78:	2218      	movs	r2, #24
 8002d7a:	4694      	mov	ip, r2
 8002d7c:	44bc      	add	ip, r7
 8002d7e:	4463      	add	r3, ip
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d00d      	beq.n	8002da2 <UART_SetConfig+0x282>
 8002d86:	dc02      	bgt.n	8002d8e <UART_SetConfig+0x26e>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <UART_SetConfig+0x278>
 8002d8c:	e01d      	b.n	8002dca <UART_SetConfig+0x2aa>
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d012      	beq.n	8002db8 <UART_SetConfig+0x298>
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d015      	beq.n	8002dc2 <UART_SetConfig+0x2a2>
 8002d96:	e018      	b.n	8002dca <UART_SetConfig+0x2aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d98:	f7fe fcfc 	bl	8001794 <HAL_RCC_GetPCLK1Freq>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002da0:	e01d      	b.n	8002dde <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002da2:	4b3d      	ldr	r3, [pc, #244]	; (8002e98 <UART_SetConfig+0x378>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2210      	movs	r2, #16
 8002da8:	4013      	ands	r3, r2
 8002daa:	d002      	beq.n	8002db2 <UART_SetConfig+0x292>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002dac:	4b3e      	ldr	r3, [pc, #248]	; (8002ea8 <UART_SetConfig+0x388>)
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002db0:	e015      	b.n	8002dde <UART_SetConfig+0x2be>
          pclk = (uint32_t) HSI_VALUE;
 8002db2:	4b3e      	ldr	r3, [pc, #248]	; (8002eac <UART_SetConfig+0x38c>)
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002db6:	e012      	b.n	8002dde <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002db8:	f7fe fc40 	bl	800163c <HAL_RCC_GetSysClockFreq>
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dc0:	e00d      	b.n	8002dde <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dc8:	e009      	b.n	8002dde <UART_SetConfig+0x2be>
      default:
        pclk = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002dce:	231a      	movs	r3, #26
 8002dd0:	2218      	movs	r2, #24
 8002dd2:	4694      	mov	ip, r2
 8002dd4:	44bc      	add	ip, r7
 8002dd6:	4463      	add	r3, ip
 8002dd8:	2201      	movs	r2, #1
 8002dda:	701a      	strb	r2, [r3, #0]
        break;
 8002ddc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d100      	bne.n	8002de6 <UART_SetConfig+0x2c6>
 8002de4:	e13c      	b.n	8003060 <UART_SetConfig+0x540>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	0013      	movs	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	189b      	adds	r3, r3, r2
 8002df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d305      	bcc.n	8002e02 <UART_SetConfig+0x2e2>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d907      	bls.n	8002e12 <UART_SetConfig+0x2f2>
      {
        ret = HAL_ERROR;
 8002e02:	231a      	movs	r3, #26
 8002e04:	2218      	movs	r2, #24
 8002e06:	4694      	mov	ip, r2
 8002e08:	44bc      	add	ip, r7
 8002e0a:	4463      	add	r3, ip
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	e126      	b.n	8003060 <UART_SetConfig+0x540>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	6939      	ldr	r1, [r7, #16]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	000b      	movs	r3, r1
 8002e20:	0e1b      	lsrs	r3, r3, #24
 8002e22:	0010      	movs	r0, r2
 8002e24:	0205      	lsls	r5, r0, #8
 8002e26:	431d      	orrs	r5, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	021c      	lsls	r4, r3, #8
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	085b      	lsrs	r3, r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68b8      	ldr	r0, [r7, #8]
 8002e3a:	68f9      	ldr	r1, [r7, #12]
 8002e3c:	1900      	adds	r0, r0, r4
 8002e3e:	4169      	adcs	r1, r5
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f7fd f9e7 	bl	8000220 <__aeabi_uldivmod>
 8002e52:	0003      	movs	r3, r0
 8002e54:	000c      	movs	r4, r1
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	4a15      	ldr	r2, [pc, #84]	; (8002eb0 <UART_SetConfig+0x390>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d908      	bls.n	8002e72 <UART_SetConfig+0x352>
 8002e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e62:	4a14      	ldr	r2, [pc, #80]	; (8002eb4 <UART_SetConfig+0x394>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d804      	bhi.n	8002e72 <UART_SetConfig+0x352>
        {
          huart->Instance->BRR = usartdiv;
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e6e:	60da      	str	r2, [r3, #12]
 8002e70:	e0f6      	b.n	8003060 <UART_SetConfig+0x540>
        }
        else
        {
          ret = HAL_ERROR;
 8002e72:	231a      	movs	r3, #26
 8002e74:	2218      	movs	r2, #24
 8002e76:	4694      	mov	ip, r2
 8002e78:	44bc      	add	ip, r7
 8002e7a:	4463      	add	r3, ip
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	e0ee      	b.n	8003060 <UART_SetConfig+0x540>
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	efff69f3 	.word	0xefff69f3
 8002e88:	ffffcfff 	.word	0xffffcfff
 8002e8c:	40004800 	.word	0x40004800
 8002e90:	fffff4ff 	.word	0xfffff4ff
 8002e94:	40013800 	.word	0x40013800
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40004400 	.word	0x40004400
 8002ea0:	40004c00 	.word	0x40004c00
 8002ea4:	40005000 	.word	0x40005000
 8002ea8:	003d0900 	.word	0x003d0900
 8002eac:	00f42400 	.word	0x00f42400
 8002eb0:	000002ff 	.word	0x000002ff
 8002eb4:	000fffff 	.word	0x000fffff
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d000      	beq.n	8002ec6 <UART_SetConfig+0x3a6>
 8002ec4:	e073      	b.n	8002fae <UART_SetConfig+0x48e>
  {
    switch (clocksource)
 8002ec6:	231b      	movs	r3, #27
 8002ec8:	2218      	movs	r2, #24
 8002eca:	4694      	mov	ip, r2
 8002ecc:	44bc      	add	ip, r7
 8002ece:	4463      	add	r3, ip
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d822      	bhi.n	8002f1c <UART_SetConfig+0x3fc>
 8002ed6:	009a      	lsls	r2, r3, #2
 8002ed8:	4b69      	ldr	r3, [pc, #420]	; (8003080 <UART_SetConfig+0x560>)
 8002eda:	18d3      	adds	r3, r2, r3
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ee0:	f7fe fc58 	bl	8001794 <HAL_RCC_GetPCLK1Freq>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ee8:	e022      	b.n	8002f30 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002eea:	f7fe fc69 	bl	80017c0 <HAL_RCC_GetPCLK2Freq>
 8002eee:	0003      	movs	r3, r0
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ef2:	e01d      	b.n	8002f30 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ef4:	4b63      	ldr	r3, [pc, #396]	; (8003084 <UART_SetConfig+0x564>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2210      	movs	r2, #16
 8002efa:	4013      	ands	r3, r2
 8002efc:	d002      	beq.n	8002f04 <UART_SetConfig+0x3e4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002efe:	4b62      	ldr	r3, [pc, #392]	; (8003088 <UART_SetConfig+0x568>)
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f02:	e015      	b.n	8002f30 <UART_SetConfig+0x410>
          pclk = (uint32_t) HSI_VALUE;
 8002f04:	4b61      	ldr	r3, [pc, #388]	; (800308c <UART_SetConfig+0x56c>)
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f08:	e012      	b.n	8002f30 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f0a:	f7fe fb97 	bl	800163c <HAL_RCC_GetSysClockFreq>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f12:	e00d      	b.n	8002f30 <UART_SetConfig+0x410>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f1a:	e009      	b.n	8002f30 <UART_SetConfig+0x410>
      default:
        pclk = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002f20:	231a      	movs	r3, #26
 8002f22:	2218      	movs	r2, #24
 8002f24:	4694      	mov	ip, r2
 8002f26:	44bc      	add	ip, r7
 8002f28:	4463      	add	r3, ip
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
        break;
 8002f2e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d100      	bne.n	8002f38 <UART_SetConfig+0x418>
 8002f36:	e093      	b.n	8003060 <UART_SetConfig+0x540>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3a:	005a      	lsls	r2, r3, #1
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	085b      	lsrs	r3, r3, #1
 8002f42:	18d2      	adds	r2, r2, r3
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	0019      	movs	r1, r3
 8002f4a:	0010      	movs	r0, r2
 8002f4c:	f7fd f8dc 	bl	8000108 <__udivsi3>
 8002f50:	0003      	movs	r3, r0
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	2b0f      	cmp	r3, #15
 8002f5a:	d920      	bls.n	8002f9e <UART_SetConfig+0x47e>
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	4a4c      	ldr	r2, [pc, #304]	; (8003090 <UART_SetConfig+0x570>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d81c      	bhi.n	8002f9e <UART_SetConfig+0x47e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	200e      	movs	r0, #14
 8002f6a:	2418      	movs	r4, #24
 8002f6c:	193b      	adds	r3, r7, r4
 8002f6e:	181b      	adds	r3, r3, r0
 8002f70:	210f      	movs	r1, #15
 8002f72:	438a      	bics	r2, r1
 8002f74:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	085b      	lsrs	r3, r3, #1
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2207      	movs	r2, #7
 8002f7e:	4013      	ands	r3, r2
 8002f80:	b299      	uxth	r1, r3
 8002f82:	193b      	adds	r3, r7, r4
 8002f84:	181b      	adds	r3, r3, r0
 8002f86:	193a      	adds	r2, r7, r4
 8002f88:	1812      	adds	r2, r2, r0
 8002f8a:	8812      	ldrh	r2, [r2, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	193a      	adds	r2, r7, r4
 8002f96:	1812      	adds	r2, r2, r0
 8002f98:	8812      	ldrh	r2, [r2, #0]
 8002f9a:	60da      	str	r2, [r3, #12]
 8002f9c:	e060      	b.n	8003060 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 8002f9e:	231a      	movs	r3, #26
 8002fa0:	2218      	movs	r2, #24
 8002fa2:	4694      	mov	ip, r2
 8002fa4:	44bc      	add	ip, r7
 8002fa6:	4463      	add	r3, ip
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	e058      	b.n	8003060 <UART_SetConfig+0x540>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fae:	231b      	movs	r3, #27
 8002fb0:	2218      	movs	r2, #24
 8002fb2:	4694      	mov	ip, r2
 8002fb4:	44bc      	add	ip, r7
 8002fb6:	4463      	add	r3, ip
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d822      	bhi.n	8003004 <UART_SetConfig+0x4e4>
 8002fbe:	009a      	lsls	r2, r3, #2
 8002fc0:	4b34      	ldr	r3, [pc, #208]	; (8003094 <UART_SetConfig+0x574>)
 8002fc2:	18d3      	adds	r3, r2, r3
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fc8:	f7fe fbe4 	bl	8001794 <HAL_RCC_GetPCLK1Freq>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fd0:	e022      	b.n	8003018 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fd2:	f7fe fbf5 	bl	80017c0 <HAL_RCC_GetPCLK2Freq>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fda:	e01d      	b.n	8003018 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fdc:	4b29      	ldr	r3, [pc, #164]	; (8003084 <UART_SetConfig+0x564>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d002      	beq.n	8002fec <UART_SetConfig+0x4cc>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002fe6:	4b28      	ldr	r3, [pc, #160]	; (8003088 <UART_SetConfig+0x568>)
 8002fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002fea:	e015      	b.n	8003018 <UART_SetConfig+0x4f8>
          pclk = (uint32_t) HSI_VALUE;
 8002fec:	4b27      	ldr	r3, [pc, #156]	; (800308c <UART_SetConfig+0x56c>)
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ff0:	e012      	b.n	8003018 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff2:	f7fe fb23 	bl	800163c <HAL_RCC_GetSysClockFreq>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ffa:	e00d      	b.n	8003018 <UART_SetConfig+0x4f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003002:	e009      	b.n	8003018 <UART_SetConfig+0x4f8>
      default:
        pclk = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003008:	231a      	movs	r3, #26
 800300a:	2218      	movs	r2, #24
 800300c:	4694      	mov	ip, r2
 800300e:	44bc      	add	ip, r7
 8003010:	4463      	add	r3, ip
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]
        break;
 8003016:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301a:	2b00      	cmp	r3, #0
 800301c:	d020      	beq.n	8003060 <UART_SetConfig+0x540>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	085a      	lsrs	r2, r3, #1
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	18d2      	adds	r2, r2, r3
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	0019      	movs	r1, r3
 800302e:	0010      	movs	r0, r2
 8003030:	f7fd f86a 	bl	8000108 <__udivsi3>
 8003034:	0003      	movs	r3, r0
 8003036:	b29b      	uxth	r3, r3
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	2b0f      	cmp	r3, #15
 800303e:	d908      	bls.n	8003052 <UART_SetConfig+0x532>
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	4a13      	ldr	r2, [pc, #76]	; (8003090 <UART_SetConfig+0x570>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d804      	bhi.n	8003052 <UART_SetConfig+0x532>
      {
        huart->Instance->BRR = usartdiv;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800304e:	60da      	str	r2, [r3, #12]
 8003050:	e006      	b.n	8003060 <UART_SetConfig+0x540>
      }
      else
      {
        ret = HAL_ERROR;
 8003052:	231a      	movs	r3, #26
 8003054:	2218      	movs	r2, #24
 8003056:	4694      	mov	ip, r2
 8003058:	44bc      	add	ip, r7
 800305a:	4463      	add	r3, ip
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2200      	movs	r2, #0
 8003064:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	2200      	movs	r2, #0
 800306a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800306c:	231a      	movs	r3, #26
 800306e:	2218      	movs	r2, #24
 8003070:	4694      	mov	ip, r2
 8003072:	44bc      	add	ip, r7
 8003074:	4463      	add	r3, ip
 8003076:	781b      	ldrb	r3, [r3, #0]
}
 8003078:	0018      	movs	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	b00e      	add	sp, #56	; 0x38
 800307e:	bdb0      	pop	{r4, r5, r7, pc}
 8003080:	0800413c 	.word	0x0800413c
 8003084:	40021000 	.word	0x40021000
 8003088:	003d0900 	.word	0x003d0900
 800308c:	00f42400 	.word	0x00f42400
 8003090:	0000ffff 	.word	0x0000ffff
 8003094:	08004160 	.word	0x08004160

08003098 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	2201      	movs	r2, #1
 80030a6:	4013      	ands	r3, r2
 80030a8:	d00b      	beq.n	80030c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a4a      	ldr	r2, [pc, #296]	; (80031dc <UART_AdvFeatureConfig+0x144>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	0019      	movs	r1, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	2202      	movs	r2, #2
 80030c8:	4013      	ands	r3, r2
 80030ca:	d00b      	beq.n	80030e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4a43      	ldr	r2, [pc, #268]	; (80031e0 <UART_AdvFeatureConfig+0x148>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	0019      	movs	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	2204      	movs	r2, #4
 80030ea:	4013      	ands	r3, r2
 80030ec:	d00b      	beq.n	8003106 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a3b      	ldr	r2, [pc, #236]	; (80031e4 <UART_AdvFeatureConfig+0x14c>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	0019      	movs	r1, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	2208      	movs	r2, #8
 800310c:	4013      	ands	r3, r2
 800310e:	d00b      	beq.n	8003128 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4a34      	ldr	r2, [pc, #208]	; (80031e8 <UART_AdvFeatureConfig+0x150>)
 8003118:	4013      	ands	r3, r2
 800311a:	0019      	movs	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	2210      	movs	r2, #16
 800312e:	4013      	ands	r3, r2
 8003130:	d00b      	beq.n	800314a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4a2c      	ldr	r2, [pc, #176]	; (80031ec <UART_AdvFeatureConfig+0x154>)
 800313a:	4013      	ands	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	2220      	movs	r2, #32
 8003150:	4013      	ands	r3, r2
 8003152:	d00b      	beq.n	800316c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	4a25      	ldr	r2, [pc, #148]	; (80031f0 <UART_AdvFeatureConfig+0x158>)
 800315c:	4013      	ands	r3, r2
 800315e:	0019      	movs	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	2240      	movs	r2, #64	; 0x40
 8003172:	4013      	ands	r3, r2
 8003174:	d01d      	beq.n	80031b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <UART_AdvFeatureConfig+0x15c>)
 800317e:	4013      	ands	r3, r2
 8003180:	0019      	movs	r1, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	035b      	lsls	r3, r3, #13
 8003196:	429a      	cmp	r2, r3
 8003198:	d10b      	bne.n	80031b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4a15      	ldr	r2, [pc, #84]	; (80031f8 <UART_AdvFeatureConfig+0x160>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	0019      	movs	r1, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	4013      	ands	r3, r2
 80031ba:	d00b      	beq.n	80031d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4a0e      	ldr	r2, [pc, #56]	; (80031fc <UART_AdvFeatureConfig+0x164>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	0019      	movs	r1, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	605a      	str	r2, [r3, #4]
  }
}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b002      	add	sp, #8
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	fffdffff 	.word	0xfffdffff
 80031e0:	fffeffff 	.word	0xfffeffff
 80031e4:	fffbffff 	.word	0xfffbffff
 80031e8:	ffff7fff 	.word	0xffff7fff
 80031ec:	ffffefff 	.word	0xffffefff
 80031f0:	ffffdfff 	.word	0xffffdfff
 80031f4:	ffefffff 	.word	0xffefffff
 80031f8:	ff9fffff 	.word	0xff9fffff
 80031fc:	fff7ffff 	.word	0xfff7ffff

08003200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af02      	add	r7, sp, #8
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2280      	movs	r2, #128	; 0x80
 800320c:	2100      	movs	r1, #0
 800320e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003210:	f7fd f9a2 	bl	8000558 <HAL_GetTick>
 8003214:	0003      	movs	r3, r0
 8003216:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2208      	movs	r2, #8
 8003220:	4013      	ands	r3, r2
 8003222:	2b08      	cmp	r3, #8
 8003224:	d10d      	bne.n	8003242 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	0399      	lsls	r1, r3, #14
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	4b18      	ldr	r3, [pc, #96]	; (8003290 <UART_CheckIdleState+0x90>)
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	0013      	movs	r3, r2
 8003234:	2200      	movs	r2, #0
 8003236:	f000 f82d 	bl	8003294 <UART_WaitOnFlagUntilTimeout>
 800323a:	1e03      	subs	r3, r0, #0
 800323c:	d001      	beq.n	8003242 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e022      	b.n	8003288 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2204      	movs	r2, #4
 800324a:	4013      	ands	r3, r2
 800324c:	2b04      	cmp	r3, #4
 800324e:	d10d      	bne.n	800326c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	03d9      	lsls	r1, r3, #15
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <UART_CheckIdleState+0x90>)
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	0013      	movs	r3, r2
 800325e:	2200      	movs	r2, #0
 8003260:	f000 f818 	bl	8003294 <UART_WaitOnFlagUntilTimeout>
 8003264:	1e03      	subs	r3, r0, #0
 8003266:	d001      	beq.n	800326c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e00d      	b.n	8003288 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2274      	movs	r2, #116	; 0x74
 8003282:	2100      	movs	r1, #0
 8003284:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	0018      	movs	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	b004      	add	sp, #16
 800328e:	bd80      	pop	{r7, pc}
 8003290:	01ffffff 	.word	0x01ffffff

08003294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	1dfb      	adds	r3, r7, #7
 80032a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a4:	e05e      	b.n	8003364 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	3301      	adds	r3, #1
 80032aa:	d05b      	beq.n	8003364 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ac:	f7fd f954 	bl	8000558 <HAL_GetTick>
 80032b0:	0002      	movs	r2, r0
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d302      	bcc.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d11b      	bne.n	80032fa <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	492f      	ldr	r1, [pc, #188]	; (800338c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80032ce:	400a      	ands	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2101      	movs	r1, #1
 80032de:	438a      	bics	r2, r1
 80032e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2220      	movs	r2, #32
 80032e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2274      	movs	r2, #116	; 0x74
 80032f2:	2100      	movs	r1, #0
 80032f4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e044      	b.n	8003384 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2204      	movs	r2, #4
 8003302:	4013      	ands	r3, r2
 8003304:	d02e      	beq.n	8003364 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69da      	ldr	r2, [r3, #28]
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	401a      	ands	r2, r3
 8003312:	2380      	movs	r3, #128	; 0x80
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	429a      	cmp	r2, r3
 8003318:	d124      	bne.n	8003364 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	0112      	lsls	r2, r2, #4
 8003322:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4917      	ldr	r1, [pc, #92]	; (800338c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003330:	400a      	ands	r2, r1
 8003332:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2101      	movs	r1, #1
 8003340:	438a      	bics	r2, r1
 8003342:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2280      	movs	r2, #128	; 0x80
 8003354:	2120      	movs	r1, #32
 8003356:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2274      	movs	r2, #116	; 0x74
 800335c:	2100      	movs	r1, #0
 800335e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e00f      	b.n	8003384 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	4013      	ands	r3, r2
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	425a      	negs	r2, r3
 8003374:	4153      	adcs	r3, r2
 8003376:	b2db      	uxtb	r3, r3
 8003378:	001a      	movs	r2, r3
 800337a:	1dfb      	adds	r3, r7, #7
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d091      	beq.n	80032a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	0018      	movs	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	b004      	add	sp, #16
 800338a:	bd80      	pop	{r7, pc}
 800338c:	fffffe5f 	.word	0xfffffe5f

08003390 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	1dbb      	adds	r3, r7, #6
 800339c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1dba      	adds	r2, r7, #6
 80033a8:	2158      	movs	r1, #88	; 0x58
 80033aa:	8812      	ldrh	r2, [r2, #0]
 80033ac:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1dba      	adds	r2, r7, #6
 80033b2:	215a      	movs	r1, #90	; 0x5a
 80033b4:	8812      	ldrh	r2, [r2, #0]
 80033b6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	015b      	lsls	r3, r3, #5
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d10d      	bne.n	80033e6 <UART_Start_Receive_IT+0x56>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d104      	bne.n	80033dc <UART_Start_Receive_IT+0x4c>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	225c      	movs	r2, #92	; 0x5c
 80033d6:	4932      	ldr	r1, [pc, #200]	; (80034a0 <UART_Start_Receive_IT+0x110>)
 80033d8:	5299      	strh	r1, [r3, r2]
 80033da:	e02e      	b.n	800343a <UART_Start_Receive_IT+0xaa>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	225c      	movs	r2, #92	; 0x5c
 80033e0:	21ff      	movs	r1, #255	; 0xff
 80033e2:	5299      	strh	r1, [r3, r2]
 80033e4:	e029      	b.n	800343a <UART_Start_Receive_IT+0xaa>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10d      	bne.n	800340a <UART_Start_Receive_IT+0x7a>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d104      	bne.n	8003400 <UART_Start_Receive_IT+0x70>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	225c      	movs	r2, #92	; 0x5c
 80033fa:	21ff      	movs	r1, #255	; 0xff
 80033fc:	5299      	strh	r1, [r3, r2]
 80033fe:	e01c      	b.n	800343a <UART_Start_Receive_IT+0xaa>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	225c      	movs	r2, #92	; 0x5c
 8003404:	217f      	movs	r1, #127	; 0x7f
 8003406:	5299      	strh	r1, [r3, r2]
 8003408:	e017      	b.n	800343a <UART_Start_Receive_IT+0xaa>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	055b      	lsls	r3, r3, #21
 8003412:	429a      	cmp	r2, r3
 8003414:	d10d      	bne.n	8003432 <UART_Start_Receive_IT+0xa2>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d104      	bne.n	8003428 <UART_Start_Receive_IT+0x98>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	225c      	movs	r2, #92	; 0x5c
 8003422:	217f      	movs	r1, #127	; 0x7f
 8003424:	5299      	strh	r1, [r3, r2]
 8003426:	e008      	b.n	800343a <UART_Start_Receive_IT+0xaa>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	225c      	movs	r2, #92	; 0x5c
 800342c:	213f      	movs	r1, #63	; 0x3f
 800342e:	5299      	strh	r1, [r3, r2]
 8003430:	e003      	b.n	800343a <UART_Start_Receive_IT+0xaa>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	225c      	movs	r2, #92	; 0x5c
 8003436:	2100      	movs	r1, #0
 8003438:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2280      	movs	r2, #128	; 0x80
 800343e:	2100      	movs	r1, #0
 8003440:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2222      	movs	r2, #34	; 0x22
 8003446:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2101      	movs	r1, #1
 8003454:	430a      	orrs	r2, r1
 8003456:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	2380      	movs	r3, #128	; 0x80
 800345e:	015b      	lsls	r3, r3, #5
 8003460:	429a      	cmp	r2, r3
 8003462:	d107      	bne.n	8003474 <UART_Start_Receive_IT+0xe4>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d103      	bne.n	8003474 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4a0d      	ldr	r2, [pc, #52]	; (80034a4 <UART_Start_Receive_IT+0x114>)
 8003470:	665a      	str	r2, [r3, #100]	; 0x64
 8003472:	e002      	b.n	800347a <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <UART_Start_Receive_IT+0x118>)
 8003478:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2274      	movs	r2, #116	; 0x74
 800347e:	2100      	movs	r1, #0
 8003480:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2190      	movs	r1, #144	; 0x90
 800348e:	0049      	lsls	r1, r1, #1
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	0018      	movs	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	b004      	add	sp, #16
 800349c:	bd80      	pop	{r7, pc}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	000001ff 	.word	0x000001ff
 80034a4:	0800365d 	.word	0x0800365d
 80034a8:	08003571 	.word	0x08003571

080034ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4912      	ldr	r1, [pc, #72]	; (8003508 <UART_EndRxTransfer+0x5c>)
 80034c0:	400a      	ands	r2, r1
 80034c2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2101      	movs	r1, #1
 80034d0:	438a      	bics	r2, r1
 80034d2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d107      	bne.n	80034ec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2110      	movs	r1, #16
 80034e8:	438a      	bics	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	b002      	add	sp, #8
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	fffffedf 	.word	0xfffffedf

0800350c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	225a      	movs	r2, #90	; 0x5a
 800351e:	2100      	movs	r1, #0
 8003520:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2252      	movs	r2, #82	; 0x52
 8003526:	2100      	movs	r1, #0
 8003528:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	0018      	movs	r0, r3
 800352e:	f7ff fae3 	bl	8002af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	46bd      	mov	sp, r7
 8003536:	b004      	add	sp, #16
 8003538:	bd80      	pop	{r7, pc}

0800353a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2140      	movs	r1, #64	; 0x40
 800354e:	438a      	bics	r2, r1
 8003550:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2220      	movs	r2, #32
 8003556:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	0018      	movs	r0, r3
 8003562:	f7ff fac1 	bl	8002ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	46bd      	mov	sp, r7
 800356a:	b002      	add	sp, #8
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003578:	230e      	movs	r3, #14
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	215c      	movs	r1, #92	; 0x5c
 8003580:	5a52      	ldrh	r2, [r2, r1]
 8003582:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003588:	2b22      	cmp	r3, #34	; 0x22
 800358a:	d158      	bne.n	800363e <UART_RxISR_8BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003592:	210c      	movs	r1, #12
 8003594:	187b      	adds	r3, r7, r1
 8003596:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003598:	187b      	adds	r3, r7, r1
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	230e      	movs	r3, #14
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	b2d9      	uxtb	r1, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	400a      	ands	r2, r1
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	225a      	movs	r2, #90	; 0x5a
 80035be:	5a9b      	ldrh	r3, [r3, r2]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b299      	uxth	r1, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	225a      	movs	r2, #90	; 0x5a
 80035ca:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	225a      	movs	r2, #90	; 0x5a
 80035d0:	5a9b      	ldrh	r3, [r3, r2]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d13a      	bne.n	800364e <UART_RxISR_8BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	491d      	ldr	r1, [pc, #116]	; (8003658 <UART_RxISR_8BIT+0xe8>)
 80035e4:	400a      	ands	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2101      	movs	r1, #1
 80035f4:	438a      	bics	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003608:	2b01      	cmp	r3, #1
 800360a:	d110      	bne.n	800362e <UART_RxISR_8BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2110      	movs	r1, #16
 8003618:	438a      	bics	r2, r1
 800361a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2258      	movs	r2, #88	; 0x58
 8003620:	5a9a      	ldrh	r2, [r3, r2]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	0011      	movs	r1, r2
 8003626:	0018      	movs	r0, r3
 8003628:	f7ff fa6e 	bl	8002b08 <HAL_UARTEx_RxEventCallback>
 800362c:	e003      	b.n	8003636 <UART_RxISR_8BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	0018      	movs	r0, r3
 8003632:	f000 fcc7 	bl	8003fc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800363c:	e007      	b.n	800364e <UART_RxISR_8BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699a      	ldr	r2, [r3, #24]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2108      	movs	r1, #8
 800364a:	430a      	orrs	r2, r1
 800364c:	619a      	str	r2, [r3, #24]
}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	46bd      	mov	sp, r7
 8003652:	b004      	add	sp, #16
 8003654:	bd80      	pop	{r7, pc}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	fffffedf 	.word	0xfffffedf

0800365c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003664:	230e      	movs	r3, #14
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	215c      	movs	r1, #92	; 0x5c
 800366c:	5a52      	ldrh	r2, [r2, r1]
 800366e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003674:	2b22      	cmp	r3, #34	; 0x22
 8003676:	d158      	bne.n	800372a <UART_RxISR_16BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800367e:	210c      	movs	r1, #12
 8003680:	187b      	adds	r3, r7, r1
 8003682:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800368a:	187b      	adds	r3, r7, r1
 800368c:	220e      	movs	r2, #14
 800368e:	18ba      	adds	r2, r7, r2
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	8812      	ldrh	r2, [r2, #0]
 8003694:	4013      	ands	r3, r2
 8003696:	b29a      	uxth	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a0:	1c9a      	adds	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	225a      	movs	r2, #90	; 0x5a
 80036aa:	5a9b      	ldrh	r3, [r3, r2]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b299      	uxth	r1, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	225a      	movs	r2, #90	; 0x5a
 80036b6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	225a      	movs	r2, #90	; 0x5a
 80036bc:	5a9b      	ldrh	r3, [r3, r2]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d13a      	bne.n	800373a <UART_RxISR_16BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	491d      	ldr	r1, [pc, #116]	; (8003744 <UART_RxISR_16BIT+0xe8>)
 80036d0:	400a      	ands	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2101      	movs	r1, #1
 80036e0:	438a      	bics	r2, r1
 80036e2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d110      	bne.n	800371a <UART_RxISR_16BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2110      	movs	r1, #16
 8003704:	438a      	bics	r2, r1
 8003706:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2258      	movs	r2, #88	; 0x58
 800370c:	5a9a      	ldrh	r2, [r3, r2]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	0011      	movs	r1, r2
 8003712:	0018      	movs	r0, r3
 8003714:	f7ff f9f8 	bl	8002b08 <HAL_UARTEx_RxEventCallback>
 8003718:	e003      	b.n	8003722 <UART_RxISR_16BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	0018      	movs	r0, r3
 800371e:	f000 fc51 	bl	8003fc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003728:	e007      	b.n	800373a <UART_RxISR_16BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699a      	ldr	r2, [r3, #24]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2108      	movs	r1, #8
 8003736:	430a      	orrs	r2, r1
 8003738:	619a      	str	r2, [r3, #24]
}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	b004      	add	sp, #16
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	fffffedf 	.word	0xfffffedf

08003748 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	b002      	add	sp, #8
 8003756:	bd80      	pop	{r7, pc}

08003758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800375c:	f7fc fe96 	bl	800048c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003760:	f000 f826 	bl	80037b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003764:	f000 f9e0 	bl	8003b28 <MX_GPIO_Init>
  MX_RTC_Init();
 8003768:	f000 f89e 	bl	80038a8 <MX_RTC_Init>
  MX_SPI1_Init();
 800376c:	f000 f93c 	bl	80039e8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003770:	f000 f972 	bl	8003a58 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003774:	f000 f9a8 	bl	8003ac8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &byte, 1);
 8003778:	4909      	ldr	r1, [pc, #36]	; (80037a0 <main+0x48>)
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <main+0x4c>)
 800377c:	2201      	movs	r2, #1
 800377e:	0018      	movs	r0, r3
 8003780:	f7fe ff50 	bl	8002624 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, &tabToPrint[0], 5, 500);
 8003784:	23fa      	movs	r3, #250	; 0xfa
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	4907      	ldr	r1, [pc, #28]	; (80037a8 <main+0x50>)
 800378a:	4808      	ldr	r0, [pc, #32]	; (80037ac <main+0x54>)
 800378c:	2205      	movs	r2, #5
 800378e:	f7fe fea1 	bl	80024d4 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8003792:	23fa      	movs	r3, #250	; 0xfa
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	0018      	movs	r0, r3
 8003798:	f7fc fee8 	bl	800056c <HAL_Delay>
	  HAL_UART_Transmit(&huart2, &tabToPrint[0], 5, 500);
 800379c:	e7f2      	b.n	8003784 <main+0x2c>
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	200001c1 	.word	0x200001c1
 80037a4:	20000030 	.word	0x20000030
 80037a8:	200001bc 	.word	0x200001bc
 80037ac:	20000130 	.word	0x20000130

080037b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037b0:	b590      	push	{r4, r7, lr}
 80037b2:	b09d      	sub	sp, #116	; 0x74
 80037b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037b6:	2438      	movs	r4, #56	; 0x38
 80037b8:	193b      	adds	r3, r7, r4
 80037ba:	0018      	movs	r0, r3
 80037bc:	2338      	movs	r3, #56	; 0x38
 80037be:	001a      	movs	r2, r3
 80037c0:	2100      	movs	r1, #0
 80037c2:	f000 fca7 	bl	8004114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037c6:	2324      	movs	r3, #36	; 0x24
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	0018      	movs	r0, r3
 80037cc:	2314      	movs	r3, #20
 80037ce:	001a      	movs	r2, r3
 80037d0:	2100      	movs	r1, #0
 80037d2:	f000 fc9f 	bl	8004114 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037d6:	003b      	movs	r3, r7
 80037d8:	0018      	movs	r0, r3
 80037da:	2324      	movs	r3, #36	; 0x24
 80037dc:	001a      	movs	r2, r3
 80037de:	2100      	movs	r1, #0
 80037e0:	f000 fc98 	bl	8004114 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037e4:	4b2e      	ldr	r3, [pc, #184]	; (80038a0 <SystemClock_Config+0xf0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a2e      	ldr	r2, [pc, #184]	; (80038a4 <SystemClock_Config+0xf4>)
 80037ea:	401a      	ands	r2, r3
 80037ec:	4b2c      	ldr	r3, [pc, #176]	; (80038a0 <SystemClock_Config+0xf0>)
 80037ee:	2180      	movs	r1, #128	; 0x80
 80037f0:	0109      	lsls	r1, r1, #4
 80037f2:	430a      	orrs	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80037f6:	0021      	movs	r1, r4
 80037f8:	187b      	adds	r3, r7, r1
 80037fa:	220a      	movs	r2, #10
 80037fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037fe:	187b      	adds	r3, r7, r1
 8003800:	2201      	movs	r2, #1
 8003802:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003804:	187b      	adds	r3, r7, r1
 8003806:	2210      	movs	r2, #16
 8003808:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800380a:	187b      	adds	r3, r7, r1
 800380c:	2201      	movs	r2, #1
 800380e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003810:	187b      	adds	r3, r7, r1
 8003812:	2202      	movs	r2, #2
 8003814:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003816:	187b      	adds	r3, r7, r1
 8003818:	2200      	movs	r2, #0
 800381a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 800381c:	187b      	adds	r3, r7, r1
 800381e:	2280      	movs	r2, #128	; 0x80
 8003820:	0312      	lsls	r2, r2, #12
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8003824:	187b      	adds	r3, r7, r1
 8003826:	2280      	movs	r2, #128	; 0x80
 8003828:	0412      	lsls	r2, r2, #16
 800382a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800382c:	187b      	adds	r3, r7, r1
 800382e:	0018      	movs	r0, r3
 8003830:	f7fd f9e6 	bl	8000c00 <HAL_RCC_OscConfig>
 8003834:	1e03      	subs	r3, r0, #0
 8003836:	d001      	beq.n	800383c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003838:	f000 fa24 	bl	8003c84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800383c:	2124      	movs	r1, #36	; 0x24
 800383e:	187b      	adds	r3, r7, r1
 8003840:	220f      	movs	r2, #15
 8003842:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003844:	187b      	adds	r3, r7, r1
 8003846:	2203      	movs	r2, #3
 8003848:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800384a:	187b      	adds	r3, r7, r1
 800384c:	2200      	movs	r2, #0
 800384e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003850:	187b      	adds	r3, r7, r1
 8003852:	2200      	movs	r2, #0
 8003854:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003856:	187b      	adds	r3, r7, r1
 8003858:	2200      	movs	r2, #0
 800385a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800385c:	187b      	adds	r3, r7, r1
 800385e:	2101      	movs	r1, #1
 8003860:	0018      	movs	r0, r3
 8003862:	f7fd fda3 	bl	80013ac <HAL_RCC_ClockConfig>
 8003866:	1e03      	subs	r3, r0, #0
 8003868:	d001      	beq.n	800386e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800386a:	f000 fa0b 	bl	8003c84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800386e:	003b      	movs	r3, r7
 8003870:	2223      	movs	r2, #35	; 0x23
 8003872:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003874:	003b      	movs	r3, r7
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800387a:	003b      	movs	r3, r7
 800387c:	2200      	movs	r2, #0
 800387e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003880:	003b      	movs	r3, r7
 8003882:	2280      	movs	r2, #128	; 0x80
 8003884:	0292      	lsls	r2, r2, #10
 8003886:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003888:	003b      	movs	r3, r7
 800388a:	0018      	movs	r0, r3
 800388c:	f7fd ffae 	bl	80017ec <HAL_RCCEx_PeriphCLKConfig>
 8003890:	1e03      	subs	r3, r0, #0
 8003892:	d001      	beq.n	8003898 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8003894:	f000 f9f6 	bl	8003c84 <Error_Handler>
  }
}
 8003898:	46c0      	nop			; (mov r8, r8)
 800389a:	46bd      	mov	sp, r7
 800389c:	b01d      	add	sp, #116	; 0x74
 800389e:	bd90      	pop	{r4, r7, pc}
 80038a0:	40007000 	.word	0x40007000
 80038a4:	ffffe7ff 	.word	0xffffe7ff

080038a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b090      	sub	sp, #64	; 0x40
 80038ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80038ae:	232c      	movs	r3, #44	; 0x2c
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	0018      	movs	r0, r3
 80038b4:	2314      	movs	r3, #20
 80038b6:	001a      	movs	r2, r3
 80038b8:	2100      	movs	r1, #0
 80038ba:	f000 fc2b 	bl	8004114 <memset>
  RTC_DateTypeDef sDate = {0};
 80038be:	2328      	movs	r3, #40	; 0x28
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80038c6:	003b      	movs	r3, r7
 80038c8:	0018      	movs	r0, r3
 80038ca:	2328      	movs	r3, #40	; 0x28
 80038cc:	001a      	movs	r2, r3
 80038ce:	2100      	movs	r1, #0
 80038d0:	f000 fc20 	bl	8004114 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80038d4:	4b41      	ldr	r3, [pc, #260]	; (80039dc <MX_RTC_Init+0x134>)
 80038d6:	4a42      	ldr	r2, [pc, #264]	; (80039e0 <MX_RTC_Init+0x138>)
 80038d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80038da:	4b40      	ldr	r3, [pc, #256]	; (80039dc <MX_RTC_Init+0x134>)
 80038dc:	2200      	movs	r2, #0
 80038de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 80038e0:	4b3e      	ldr	r3, [pc, #248]	; (80039dc <MX_RTC_Init+0x134>)
 80038e2:	221f      	movs	r2, #31
 80038e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 80038e6:	4b3d      	ldr	r3, [pc, #244]	; (80039dc <MX_RTC_Init+0x134>)
 80038e8:	4a3e      	ldr	r2, [pc, #248]	; (80039e4 <MX_RTC_Init+0x13c>)
 80038ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80038ec:	4b3b      	ldr	r3, [pc, #236]	; (80039dc <MX_RTC_Init+0x134>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80038f2:	4b3a      	ldr	r3, [pc, #232]	; (80039dc <MX_RTC_Init+0x134>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80038f8:	4b38      	ldr	r3, [pc, #224]	; (80039dc <MX_RTC_Init+0x134>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80038fe:	4b37      	ldr	r3, [pc, #220]	; (80039dc <MX_RTC_Init+0x134>)
 8003900:	2200      	movs	r2, #0
 8003902:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003904:	4b35      	ldr	r3, [pc, #212]	; (80039dc <MX_RTC_Init+0x134>)
 8003906:	0018      	movs	r0, r3
 8003908:	f7fe f8c8 	bl	8001a9c <HAL_RTC_Init>
 800390c:	1e03      	subs	r3, r0, #0
 800390e:	d001      	beq.n	8003914 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003910:	f000 f9b8 	bl	8003c84 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	187b      	adds	r3, r7, r1
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800391c:	187b      	adds	r3, r7, r1
 800391e:	2200      	movs	r2, #0
 8003920:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003922:	187b      	adds	r3, r7, r1
 8003924:	2200      	movs	r2, #0
 8003926:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003928:	187b      	adds	r3, r7, r1
 800392a:	2200      	movs	r2, #0
 800392c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800392e:	187b      	adds	r3, r7, r1
 8003930:	2200      	movs	r2, #0
 8003932:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003934:	1879      	adds	r1, r7, r1
 8003936:	4b29      	ldr	r3, [pc, #164]	; (80039dc <MX_RTC_Init+0x134>)
 8003938:	2200      	movs	r2, #0
 800393a:	0018      	movs	r0, r3
 800393c:	f7fe f94c 	bl	8001bd8 <HAL_RTC_SetTime>
 8003940:	1e03      	subs	r3, r0, #0
 8003942:	d001      	beq.n	8003948 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003944:	f000 f99e 	bl	8003c84 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003948:	2128      	movs	r1, #40	; 0x28
 800394a:	187b      	adds	r3, r7, r1
 800394c:	2201      	movs	r2, #1
 800394e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003950:	187b      	adds	r3, r7, r1
 8003952:	2201      	movs	r2, #1
 8003954:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003956:	187b      	adds	r3, r7, r1
 8003958:	2201      	movs	r2, #1
 800395a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 800395c:	187b      	adds	r3, r7, r1
 800395e:	2200      	movs	r2, #0
 8003960:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003962:	1879      	adds	r1, r7, r1
 8003964:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <MX_RTC_Init+0x134>)
 8003966:	2200      	movs	r2, #0
 8003968:	0018      	movs	r0, r3
 800396a:	f7fe f9f9 	bl	8001d60 <HAL_RTC_SetDate>
 800396e:	1e03      	subs	r3, r0, #0
 8003970:	d001      	beq.n	8003976 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003972:	f000 f987 	bl	8003c84 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003976:	003b      	movs	r3, r7
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800397c:	003b      	movs	r3, r7
 800397e:	2200      	movs	r2, #0
 8003980:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003982:	003b      	movs	r3, r7
 8003984:	2200      	movs	r2, #0
 8003986:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003988:	003b      	movs	r3, r7
 800398a:	2200      	movs	r2, #0
 800398c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800398e:	003b      	movs	r3, r7
 8003990:	2200      	movs	r2, #0
 8003992:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003994:	003b      	movs	r3, r7
 8003996:	2200      	movs	r2, #0
 8003998:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800399a:	003b      	movs	r3, r7
 800399c:	2200      	movs	r2, #0
 800399e:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80039a0:	003b      	movs	r3, r7
 80039a2:	22f0      	movs	r2, #240	; 0xf0
 80039a4:	0512      	lsls	r2, r2, #20
 80039a6:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80039a8:	003b      	movs	r3, r7
 80039aa:	2200      	movs	r2, #0
 80039ac:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80039ae:	003b      	movs	r3, r7
 80039b0:	2220      	movs	r2, #32
 80039b2:	2101      	movs	r1, #1
 80039b4:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80039b6:	003b      	movs	r3, r7
 80039b8:	2280      	movs	r2, #128	; 0x80
 80039ba:	0052      	lsls	r2, r2, #1
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80039be:	0039      	movs	r1, r7
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <MX_RTC_Init+0x134>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	0018      	movs	r0, r3
 80039c6:	f7fe fa79 	bl	8001ebc <HAL_RTC_SetAlarm_IT>
 80039ca:	1e03      	subs	r3, r0, #0
 80039cc:	d001      	beq.n	80039d2 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 80039ce:	f000 f959 	bl	8003c84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b010      	add	sp, #64	; 0x40
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	200000b4 	.word	0x200000b4
 80039e0:	40002800 	.word	0x40002800
 80039e4:	000003ff 	.word	0x000003ff

080039e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80039ec:	4b18      	ldr	r3, [pc, #96]	; (8003a50 <MX_SPI1_Init+0x68>)
 80039ee:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <MX_SPI1_Init+0x6c>)
 80039f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039f2:	4b17      	ldr	r3, [pc, #92]	; (8003a50 <MX_SPI1_Init+0x68>)
 80039f4:	2282      	movs	r2, #130	; 0x82
 80039f6:	0052      	lsls	r2, r2, #1
 80039f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <MX_SPI1_Init+0x68>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a00:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <MX_SPI1_Init+0x68>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a06:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <MX_SPI1_Init+0x68>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a0c:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <MX_SPI1_Init+0x68>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a12:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <MX_SPI1_Init+0x68>)
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	0092      	lsls	r2, r2, #2
 8003a18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <MX_SPI1_Init+0x68>)
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <MX_SPI1_Init+0x68>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <MX_SPI1_Init+0x68>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a2c:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <MX_SPI1_Init+0x68>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003a32:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <MX_SPI1_Init+0x68>)
 8003a34:	2207      	movs	r2, #7
 8003a36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <MX_SPI1_Init+0x68>)
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f7fe fc62 	bl	8002304 <HAL_SPI_Init>
 8003a40:	1e03      	subs	r3, r0, #0
 8003a42:	d001      	beq.n	8003a48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003a44:	f000 f91e 	bl	8003c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	200000d8 	.word	0x200000d8
 8003a54:	40013000 	.word	0x40013000

08003a58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a5c:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <MX_USART1_UART_Init+0x68>)
 8003a5e:	4a19      	ldr	r2, [pc, #100]	; (8003ac4 <MX_USART1_UART_Init+0x6c>)
 8003a60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003a62:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <MX_USART1_UART_Init+0x68>)
 8003a64:	2296      	movs	r2, #150	; 0x96
 8003a66:	0192      	lsls	r2, r2, #6
 8003a68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a6a:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <MX_USART1_UART_Init+0x68>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a70:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <MX_USART1_UART_Init+0x68>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a76:	4b12      	ldr	r3, [pc, #72]	; (8003ac0 <MX_USART1_UART_Init+0x68>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a7c:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <MX_USART1_UART_Init+0x68>)
 8003a7e:	220c      	movs	r2, #12
 8003a80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a82:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <MX_USART1_UART_Init+0x68>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a88:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <MX_USART1_UART_Init+0x68>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <MX_USART1_UART_Init+0x68>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 8003a94:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <MX_USART1_UART_Init+0x68>)
 8003a96:	2203      	movs	r2, #3
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8003a9a:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <MX_USART1_UART_Init+0x68>)
 8003a9c:	2280      	movs	r2, #128	; 0x80
 8003a9e:	0292      	lsls	r2, r2, #10
 8003aa0:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8003aa2:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <MX_USART1_UART_Init+0x68>)
 8003aa4:	2280      	movs	r2, #128	; 0x80
 8003aa6:	0252      	lsls	r2, r2, #9
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <MX_USART1_UART_Init+0x68>)
 8003aac:	0018      	movs	r0, r3
 8003aae:	f7fe fcbd 	bl	800242c <HAL_UART_Init>
 8003ab2:	1e03      	subs	r3, r0, #0
 8003ab4:	d001      	beq.n	8003aba <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 8003ab6:	f000 f8e5 	bl	8003c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000030 	.word	0x20000030
 8003ac4:	40013800 	.word	0x40013800

08003ac8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003acc:	4b14      	ldr	r3, [pc, #80]	; (8003b20 <MX_USART2_UART_Init+0x58>)
 8003ace:	4a15      	ldr	r2, [pc, #84]	; (8003b24 <MX_USART2_UART_Init+0x5c>)
 8003ad0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <MX_USART2_UART_Init+0x58>)
 8003ad4:	22e1      	movs	r2, #225	; 0xe1
 8003ad6:	0252      	lsls	r2, r2, #9
 8003ad8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ada:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <MX_USART2_UART_Init+0x58>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <MX_USART2_UART_Init+0x58>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ae6:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <MX_USART2_UART_Init+0x58>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <MX_USART2_UART_Init+0x58>)
 8003aee:	220c      	movs	r2, #12
 8003af0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003af2:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <MX_USART2_UART_Init+0x58>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <MX_USART2_UART_Init+0x58>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003afe:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <MX_USART2_UART_Init+0x58>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <MX_USART2_UART_Init+0x58>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <MX_USART2_UART_Init+0x58>)
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f7fe fc8d 	bl	800242c <HAL_UART_Init>
 8003b12:	1e03      	subs	r3, r0, #0
 8003b14:	d001      	beq.n	8003b1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003b16:	f000 f8b5 	bl	8003c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20000130 	.word	0x20000130
 8003b24:	40004400 	.word	0x40004400

08003b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b28:	b590      	push	{r4, r7, lr}
 8003b2a:	b08b      	sub	sp, #44	; 0x2c
 8003b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b2e:	2414      	movs	r4, #20
 8003b30:	193b      	adds	r3, r7, r4
 8003b32:	0018      	movs	r0, r3
 8003b34:	2314      	movs	r3, #20
 8003b36:	001a      	movs	r2, r3
 8003b38:	2100      	movs	r1, #0
 8003b3a:	f000 faeb 	bl	8004114 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3e:	4b4c      	ldr	r3, [pc, #304]	; (8003c70 <MX_GPIO_Init+0x148>)
 8003b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b42:	4b4b      	ldr	r3, [pc, #300]	; (8003c70 <MX_GPIO_Init+0x148>)
 8003b44:	2101      	movs	r1, #1
 8003b46:	430a      	orrs	r2, r1
 8003b48:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b4a:	4b49      	ldr	r3, [pc, #292]	; (8003c70 <MX_GPIO_Init+0x148>)
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	2201      	movs	r2, #1
 8003b50:	4013      	ands	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b56:	4b46      	ldr	r3, [pc, #280]	; (8003c70 <MX_GPIO_Init+0x148>)
 8003b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5a:	4b45      	ldr	r3, [pc, #276]	; (8003c70 <MX_GPIO_Init+0x148>)
 8003b5c:	2102      	movs	r1, #2
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b62:	4b43      	ldr	r3, [pc, #268]	; (8003c70 <MX_GPIO_Init+0x148>)
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	2202      	movs	r2, #2
 8003b68:	4013      	ands	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b6e:	4b40      	ldr	r3, [pc, #256]	; (8003c70 <MX_GPIO_Init+0x148>)
 8003b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b72:	4b3f      	ldr	r3, [pc, #252]	; (8003c70 <MX_GPIO_Init+0x148>)
 8003b74:	2104      	movs	r1, #4
 8003b76:	430a      	orrs	r2, r1
 8003b78:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b7a:	4b3d      	ldr	r3, [pc, #244]	; (8003c70 <MX_GPIO_Init+0x148>)
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	2204      	movs	r2, #4
 8003b80:	4013      	ands	r3, r2
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b86:	4b3a      	ldr	r3, [pc, #232]	; (8003c70 <MX_GPIO_Init+0x148>)
 8003b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8a:	4b39      	ldr	r3, [pc, #228]	; (8003c70 <MX_GPIO_Init+0x148>)
 8003b8c:	2180      	movs	r1, #128	; 0x80
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b92:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <MX_GPIO_Init+0x148>)
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	2280      	movs	r2, #128	; 0x80
 8003b98:	4013      	ands	r3, r2
 8003b9a:	607b      	str	r3, [r7, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin, GPIO_PIN_RESET);
 8003b9e:	4935      	ldr	r1, [pc, #212]	; (8003c74 <MX_GPIO_Init+0x14c>)
 8003ba0:	23a0      	movs	r3, #160	; 0xa0
 8003ba2:	05db      	lsls	r3, r3, #23
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f7fc ffe6 	bl	8000b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin, GPIO_PIN_RESET);
 8003bac:	4b32      	ldr	r3, [pc, #200]	; (8003c78 <MX_GPIO_Init+0x150>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2107      	movs	r1, #7
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f7fc ffe0 	bl	8000b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15_RESERVED_Pin PA12_RESERVED_Pin PA1_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin;
 8003bb8:	193b      	adds	r3, r7, r4
 8003bba:	4a2e      	ldr	r2, [pc, #184]	; (8003c74 <MX_GPIO_Init+0x14c>)
 8003bbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bbe:	193b      	adds	r3, r7, r4
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc4:	193b      	adds	r3, r7, r4
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bca:	193b      	adds	r3, r7, r4
 8003bcc:	2202      	movs	r2, #2
 8003bce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd0:	193a      	adds	r2, r7, r4
 8003bd2:	23a0      	movs	r3, #160	; 0xa0
 8003bd4:	05db      	lsls	r3, r3, #23
 8003bd6:	0011      	movs	r1, r2
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f7fc fe4f 	bl	800087c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_RESERVED_Pin PB1_RESERVED_Pin PB0_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB4_RESERVED_Pin|PB1_RESERVED_Pin|PB0_RESERVED_Pin;
 8003bde:	193b      	adds	r3, r7, r4
 8003be0:	2213      	movs	r2, #19
 8003be2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003be4:	193b      	adds	r3, r7, r4
 8003be6:	4a25      	ldr	r2, [pc, #148]	; (8003c7c <MX_GPIO_Init+0x154>)
 8003be8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	193b      	adds	r3, r7, r4
 8003bec:	2200      	movs	r2, #0
 8003bee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf0:	193b      	adds	r3, r7, r4
 8003bf2:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <MX_GPIO_Init+0x158>)
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	0010      	movs	r0, r2
 8003bf8:	f7fc fe40 	bl	800087c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC13_RESERVED_Pin;
 8003bfc:	0021      	movs	r1, r4
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	2280      	movs	r2, #128	; 0x80
 8003c02:	0192      	lsls	r2, r2, #6
 8003c04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	4a1c      	ldr	r2, [pc, #112]	; (8003c7c <MX_GPIO_Init+0x154>)
 8003c0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	2200      	movs	r2, #0
 8003c10:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PC13_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8003c12:	000c      	movs	r4, r1
 8003c14:	187b      	adds	r3, r7, r1
 8003c16:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <MX_GPIO_Init+0x150>)
 8003c18:	0019      	movs	r1, r3
 8003c1a:	0010      	movs	r0, r2
 8003c1c:	f7fc fe2e 	bl	800087c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1_RESERVED_Pin PC0_RESERVED_Pin PC2_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin;
 8003c20:	0021      	movs	r1, r4
 8003c22:	187b      	adds	r3, r7, r1
 8003c24:	2207      	movs	r2, #7
 8003c26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c28:	187b      	adds	r3, r7, r1
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2e:	187b      	adds	r3, r7, r1
 8003c30:	2200      	movs	r2, #0
 8003c32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c34:	187b      	adds	r3, r7, r1
 8003c36:	2202      	movs	r2, #2
 8003c38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c3a:	187b      	adds	r3, r7, r1
 8003c3c:	4a0e      	ldr	r2, [pc, #56]	; (8003c78 <MX_GPIO_Init+0x150>)
 8003c3e:	0019      	movs	r1, r3
 8003c40:	0010      	movs	r0, r2
 8003c42:	f7fc fe1b 	bl	800087c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003c46:	2200      	movs	r2, #0
 8003c48:	2100      	movs	r1, #0
 8003c4a:	2005      	movs	r0, #5
 8003c4c:	f7fc fd5c 	bl	8000708 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003c50:	2005      	movs	r0, #5
 8003c52:	f7fc fd6e 	bl	8000732 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003c56:	2200      	movs	r2, #0
 8003c58:	2100      	movs	r1, #0
 8003c5a:	2007      	movs	r0, #7
 8003c5c:	f7fc fd54 	bl	8000708 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003c60:	2007      	movs	r0, #7
 8003c62:	f7fc fd66 	bl	8000732 <HAL_NVIC_EnableIRQ>

}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b00b      	add	sp, #44	; 0x2c
 8003c6c:	bd90      	pop	{r4, r7, pc}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	40021000 	.word	0x40021000
 8003c74:	00009002 	.word	0x00009002
 8003c78:	50000800 	.word	0x50000800
 8003c7c:	10110000 	.word	0x10110000
 8003c80:	50000400 	.word	0x50000400

08003c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c88:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c8a:	e7fe      	b.n	8003c8a <Error_Handler+0x6>

08003c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c90:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <HAL_MspInit+0x24>)
 8003c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <HAL_MspInit+0x24>)
 8003c96:	2101      	movs	r1, #1
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c9c:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <HAL_MspInit+0x24>)
 8003c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca0:	4b03      	ldr	r3, [pc, #12]	; (8003cb0 <HAL_MspInit+0x24>)
 8003ca2:	2180      	movs	r1, #128	; 0x80
 8003ca4:	0549      	lsls	r1, r1, #21
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40021000 	.word	0x40021000

08003cb4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <HAL_RTC_MspInit+0x38>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d10e      	bne.n	8003ce4 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <HAL_RTC_MspInit+0x3c>)
 8003cc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <HAL_RTC_MspInit+0x3c>)
 8003ccc:	2180      	movs	r1, #128	; 0x80
 8003cce:	02c9      	lsls	r1, r1, #11
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	2002      	movs	r0, #2
 8003cda:	f7fc fd15 	bl	8000708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003cde:	2002      	movs	r0, #2
 8003ce0:	f7fc fd27 	bl	8000732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b002      	add	sp, #8
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40002800 	.word	0x40002800
 8003cf0:	40021000 	.word	0x40021000

08003cf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cf4:	b590      	push	{r4, r7, lr}
 8003cf6:	b08b      	sub	sp, #44	; 0x2c
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfc:	2314      	movs	r3, #20
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	0018      	movs	r0, r3
 8003d02:	2314      	movs	r3, #20
 8003d04:	001a      	movs	r2, r3
 8003d06:	2100      	movs	r1, #0
 8003d08:	f000 fa04 	bl	8004114 <memset>
  if(hspi->Instance==SPI1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a29      	ldr	r2, [pc, #164]	; (8003db8 <HAL_SPI_MspInit+0xc4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d14c      	bne.n	8003db0 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d16:	4b29      	ldr	r3, [pc, #164]	; (8003dbc <HAL_SPI_MspInit+0xc8>)
 8003d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d1a:	4b28      	ldr	r3, [pc, #160]	; (8003dbc <HAL_SPI_MspInit+0xc8>)
 8003d1c:	2180      	movs	r1, #128	; 0x80
 8003d1e:	0149      	lsls	r1, r1, #5
 8003d20:	430a      	orrs	r2, r1
 8003d22:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d24:	4b25      	ldr	r3, [pc, #148]	; (8003dbc <HAL_SPI_MspInit+0xc8>)
 8003d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d28:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <HAL_SPI_MspInit+0xc8>)
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d30:	4b22      	ldr	r3, [pc, #136]	; (8003dbc <HAL_SPI_MspInit+0xc8>)
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	2202      	movs	r2, #2
 8003d36:	4013      	ands	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d3c:	4b1f      	ldr	r3, [pc, #124]	; (8003dbc <HAL_SPI_MspInit+0xc8>)
 8003d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d40:	4b1e      	ldr	r3, [pc, #120]	; (8003dbc <HAL_SPI_MspInit+0xc8>)
 8003d42:	2101      	movs	r1, #1
 8003d44:	430a      	orrs	r2, r1
 8003d46:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d48:	4b1c      	ldr	r3, [pc, #112]	; (8003dbc <HAL_SPI_MspInit+0xc8>)
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	4013      	ands	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = PB3_RESERVED_Pin;
 8003d54:	2114      	movs	r1, #20
 8003d56:	187b      	adds	r3, r7, r1
 8003d58:	2208      	movs	r2, #8
 8003d5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5c:	187b      	adds	r3, r7, r1
 8003d5e:	2202      	movs	r2, #2
 8003d60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d62:	187b      	adds	r3, r7, r1
 8003d64:	2200      	movs	r2, #0
 8003d66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d68:	187b      	adds	r3, r7, r1
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003d6e:	187b      	adds	r3, r7, r1
 8003d70:	2200      	movs	r2, #0
 8003d72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PB3_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8003d74:	000c      	movs	r4, r1
 8003d76:	187b      	adds	r3, r7, r1
 8003d78:	4a11      	ldr	r2, [pc, #68]	; (8003dc0 <HAL_SPI_MspInit+0xcc>)
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	0010      	movs	r0, r2
 8003d7e:	f7fc fd7d 	bl	800087c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA7_RESERVED_Pin|PA6_RESERVED_Pin;
 8003d82:	0021      	movs	r1, r4
 8003d84:	187b      	adds	r3, r7, r1
 8003d86:	22c0      	movs	r2, #192	; 0xc0
 8003d88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8a:	187b      	adds	r3, r7, r1
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d90:	187b      	adds	r3, r7, r1
 8003d92:	2200      	movs	r2, #0
 8003d94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d96:	187b      	adds	r3, r7, r1
 8003d98:	2203      	movs	r2, #3
 8003d9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003d9c:	187b      	adds	r3, r7, r1
 8003d9e:	2200      	movs	r2, #0
 8003da0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da2:	187a      	adds	r2, r7, r1
 8003da4:	23a0      	movs	r3, #160	; 0xa0
 8003da6:	05db      	lsls	r3, r3, #23
 8003da8:	0011      	movs	r1, r2
 8003daa:	0018      	movs	r0, r3
 8003dac:	f7fc fd66 	bl	800087c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003db0:	46c0      	nop			; (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b00b      	add	sp, #44	; 0x2c
 8003db6:	bd90      	pop	{r4, r7, pc}
 8003db8:	40013000 	.word	0x40013000
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	50000400 	.word	0x50000400

08003dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b08b      	sub	sp, #44	; 0x2c
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dcc:	2314      	movs	r3, #20
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	2314      	movs	r3, #20
 8003dd4:	001a      	movs	r2, r3
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	f000 f99c 	bl	8004114 <memset>
  if(huart->Instance==USART1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a4a      	ldr	r2, [pc, #296]	; (8003f0c <HAL_UART_MspInit+0x148>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d156      	bne.n	8003e94 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003de6:	4b4a      	ldr	r3, [pc, #296]	; (8003f10 <HAL_UART_MspInit+0x14c>)
 8003de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dea:	4b49      	ldr	r3, [pc, #292]	; (8003f10 <HAL_UART_MspInit+0x14c>)
 8003dec:	2180      	movs	r1, #128	; 0x80
 8003dee:	01c9      	lsls	r1, r1, #7
 8003df0:	430a      	orrs	r2, r1
 8003df2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003df4:	4b46      	ldr	r3, [pc, #280]	; (8003f10 <HAL_UART_MspInit+0x14c>)
 8003df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df8:	4b45      	ldr	r3, [pc, #276]	; (8003f10 <HAL_UART_MspInit+0x14c>)
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e00:	4b43      	ldr	r3, [pc, #268]	; (8003f10 <HAL_UART_MspInit+0x14c>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	2202      	movs	r2, #2
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0c:	4b40      	ldr	r3, [pc, #256]	; (8003f10 <HAL_UART_MspInit+0x14c>)
 8003e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e10:	4b3f      	ldr	r3, [pc, #252]	; (8003f10 <HAL_UART_MspInit+0x14c>)
 8003e12:	2101      	movs	r1, #1
 8003e14:	430a      	orrs	r2, r1
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e18:	4b3d      	ldr	r3, [pc, #244]	; (8003f10 <HAL_UART_MspInit+0x14c>)
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	4013      	ands	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003e24:	2114      	movs	r1, #20
 8003e26:	187b      	adds	r3, r7, r1
 8003e28:	2240      	movs	r2, #64	; 0x40
 8003e2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2c:	187b      	adds	r3, r7, r1
 8003e2e:	2202      	movs	r2, #2
 8003e30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e32:	187b      	adds	r3, r7, r1
 8003e34:	2200      	movs	r2, #0
 8003e36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e38:	187b      	adds	r3, r7, r1
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003e3e:	187b      	adds	r3, r7, r1
 8003e40:	2200      	movs	r2, #0
 8003e42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e44:	000c      	movs	r4, r1
 8003e46:	187b      	adds	r3, r7, r1
 8003e48:	4a32      	ldr	r2, [pc, #200]	; (8003f14 <HAL_UART_MspInit+0x150>)
 8003e4a:	0019      	movs	r1, r3
 8003e4c:	0010      	movs	r0, r2
 8003e4e:	f7fc fd15 	bl	800087c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e52:	0021      	movs	r1, r4
 8003e54:	187b      	adds	r3, r7, r1
 8003e56:	2280      	movs	r2, #128	; 0x80
 8003e58:	00d2      	lsls	r2, r2, #3
 8003e5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5c:	187b      	adds	r3, r7, r1
 8003e5e:	2202      	movs	r2, #2
 8003e60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	2200      	movs	r2, #0
 8003e66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	2204      	movs	r2, #4
 8003e72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e74:	187a      	adds	r2, r7, r1
 8003e76:	23a0      	movs	r3, #160	; 0xa0
 8003e78:	05db      	lsls	r3, r3, #23
 8003e7a:	0011      	movs	r1, r2
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f7fc fcfd 	bl	800087c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e82:	2200      	movs	r2, #0
 8003e84:	2100      	movs	r1, #0
 8003e86:	201b      	movs	r0, #27
 8003e88:	f7fc fc3e 	bl	8000708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e8c:	201b      	movs	r0, #27
 8003e8e:	f7fc fc50 	bl	8000732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e92:	e036      	b.n	8003f02 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1f      	ldr	r2, [pc, #124]	; (8003f18 <HAL_UART_MspInit+0x154>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d131      	bne.n	8003f02 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e9e:	4b1c      	ldr	r3, [pc, #112]	; (8003f10 <HAL_UART_MspInit+0x14c>)
 8003ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ea2:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <HAL_UART_MspInit+0x14c>)
 8003ea4:	2180      	movs	r1, #128	; 0x80
 8003ea6:	0289      	lsls	r1, r1, #10
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eac:	4b18      	ldr	r3, [pc, #96]	; (8003f10 <HAL_UART_MspInit+0x14c>)
 8003eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb0:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <HAL_UART_MspInit+0x14c>)
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eb8:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <HAL_UART_MspInit+0x14c>)
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003ec4:	2114      	movs	r1, #20
 8003ec6:	187b      	adds	r3, r7, r1
 8003ec8:	220c      	movs	r2, #12
 8003eca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ecc:	187b      	adds	r3, r7, r1
 8003ece:	2202      	movs	r2, #2
 8003ed0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed8:	187b      	adds	r3, r7, r1
 8003eda:	2203      	movs	r2, #3
 8003edc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003ede:	187b      	adds	r3, r7, r1
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee4:	187a      	adds	r2, r7, r1
 8003ee6:	23a0      	movs	r3, #160	; 0xa0
 8003ee8:	05db      	lsls	r3, r3, #23
 8003eea:	0011      	movs	r1, r2
 8003eec:	0018      	movs	r0, r3
 8003eee:	f7fc fcc5 	bl	800087c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	201c      	movs	r0, #28
 8003ef8:	f7fc fc06 	bl	8000708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003efc:	201c      	movs	r0, #28
 8003efe:	f7fc fc18 	bl	8000732 <HAL_NVIC_EnableIRQ>
}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b00b      	add	sp, #44	; 0x2c
 8003f08:	bd90      	pop	{r4, r7, pc}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	40013800 	.word	0x40013800
 8003f10:	40021000 	.word	0x40021000
 8003f14:	50000400 	.word	0x50000400
 8003f18:	40004400 	.word	0x40004400

08003f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f20:	e7fe      	b.n	8003f20 <NMI_Handler+0x4>

08003f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f26:	e7fe      	b.n	8003f26 <HardFault_Handler+0x4>

08003f28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003f2c:	46c0      	nop			; (mov r8, r8)
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f40:	f7fc faf8 	bl	8000534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f44:	46c0      	nop			; (mov r8, r8)
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003f50:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <RTC_IRQHandler+0x14>)
 8003f52:	0018      	movs	r0, r3
 8003f54:	f7fe f8fe 	bl	8002154 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003f58:	46c0      	nop			; (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	200000b4 	.word	0x200000b4

08003f64 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003f68:	2001      	movs	r0, #1
 8003f6a:	f7fc fe23 	bl	8000bb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003f6e:	2002      	movs	r0, #2
 8003f70:	f7fc fe20 	bl	8000bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003f74:	46c0      	nop			; (mov r8, r8)
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003f7e:	2010      	movs	r0, #16
 8003f80:	f7fc fe18 	bl	8000bb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	019b      	lsls	r3, r3, #6
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7fc fe13 	bl	8000bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f98:	4b03      	ldr	r3, [pc, #12]	; (8003fa8 <USART1_IRQHandler+0x14>)
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f7fe fb9a 	bl	80026d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003fa0:	46c0      	nop			; (mov r8, r8)
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	20000030 	.word	0x20000030

08003fac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003fb0:	4b03      	ldr	r3, [pc, #12]	; (8003fc0 <USART2_IRQHandler+0x14>)
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f7fe fb8e 	bl	80026d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003fb8:	46c0      	nop			; (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	20000130 	.word	0x20000130

08003fc4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
uint8_t byte;
uint8_t tabResult[5];
uint8_t tabToPrint[5];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a20      	ldr	r2, [pc, #128]	; (8004054 <HAL_UART_RxCpltCallback+0x90>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d139      	bne.n	800404a <HAL_UART_RxCpltCallback+0x86>
	  {
		  static indexOfReceive;
	    /* Transmit one byte with 100 ms timeout */
		  if ((char)byte == 'R'){
 8003fd6:	4b20      	ldr	r3, [pc, #128]	; (8004058 <HAL_UART_RxCpltCallback+0x94>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b52      	cmp	r3, #82	; 0x52
 8003fdc:	d102      	bne.n	8003fe4 <HAL_UART_RxCpltCallback+0x20>
			  indexOfReceive = 0;
 8003fde:	4b1f      	ldr	r3, [pc, #124]	; (800405c <HAL_UART_RxCpltCallback+0x98>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
		  }
		  tabResult[indexOfReceive] = byte;
 8003fe4:	4b1d      	ldr	r3, [pc, #116]	; (800405c <HAL_UART_RxCpltCallback+0x98>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1b      	ldr	r2, [pc, #108]	; (8004058 <HAL_UART_RxCpltCallback+0x94>)
 8003fea:	7811      	ldrb	r1, [r2, #0]
 8003fec:	4a1c      	ldr	r2, [pc, #112]	; (8004060 <HAL_UART_RxCpltCallback+0x9c>)
 8003fee:	54d1      	strb	r1, [r2, r3]
		  indexOfReceive++;
 8003ff0:	4b1a      	ldr	r3, [pc, #104]	; (800405c <HAL_UART_RxCpltCallback+0x98>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	4b19      	ldr	r3, [pc, #100]	; (800405c <HAL_UART_RxCpltCallback+0x98>)
 8003ff8:	601a      	str	r2, [r3, #0]
	    /* Receive one byte in interrupt mode */
		  if (indexOfReceive!=5){
 8003ffa:	4b18      	ldr	r3, [pc, #96]	; (800405c <HAL_UART_RxCpltCallback+0x98>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b05      	cmp	r3, #5
 8004000:	d006      	beq.n	8004010 <HAL_UART_RxCpltCallback+0x4c>
			  HAL_UART_Receive_IT(&huart1, &byte, 1);
 8004002:	4915      	ldr	r1, [pc, #84]	; (8004058 <HAL_UART_RxCpltCallback+0x94>)
 8004004:	4b17      	ldr	r3, [pc, #92]	; (8004064 <HAL_UART_RxCpltCallback+0xa0>)
 8004006:	2201      	movs	r2, #1
 8004008:	0018      	movs	r0, r3
 800400a:	f7fe fb0b 	bl	8002624 <HAL_UART_Receive_IT>
			  indexOfReceive = 0;
		  }

	  }

}
 800400e:	e01c      	b.n	800404a <HAL_UART_RxCpltCallback+0x86>
			  tabToPrint[0] = tabResult[0];
 8004010:	4b13      	ldr	r3, [pc, #76]	; (8004060 <HAL_UART_RxCpltCallback+0x9c>)
 8004012:	781a      	ldrb	r2, [r3, #0]
 8004014:	4b14      	ldr	r3, [pc, #80]	; (8004068 <HAL_UART_RxCpltCallback+0xa4>)
 8004016:	701a      	strb	r2, [r3, #0]
			  tabToPrint[1] = tabResult[1];
 8004018:	4b11      	ldr	r3, [pc, #68]	; (8004060 <HAL_UART_RxCpltCallback+0x9c>)
 800401a:	785a      	ldrb	r2, [r3, #1]
 800401c:	4b12      	ldr	r3, [pc, #72]	; (8004068 <HAL_UART_RxCpltCallback+0xa4>)
 800401e:	705a      	strb	r2, [r3, #1]
			  tabToPrint[2] = tabResult[2];
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <HAL_UART_RxCpltCallback+0x9c>)
 8004022:	789a      	ldrb	r2, [r3, #2]
 8004024:	4b10      	ldr	r3, [pc, #64]	; (8004068 <HAL_UART_RxCpltCallback+0xa4>)
 8004026:	709a      	strb	r2, [r3, #2]
			  tabToPrint[3] = tabResult[3];
 8004028:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <HAL_UART_RxCpltCallback+0x9c>)
 800402a:	78da      	ldrb	r2, [r3, #3]
 800402c:	4b0e      	ldr	r3, [pc, #56]	; (8004068 <HAL_UART_RxCpltCallback+0xa4>)
 800402e:	70da      	strb	r2, [r3, #3]
			  tabToPrint[4] = tabResult[4];
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_UART_RxCpltCallback+0x9c>)
 8004032:	791a      	ldrb	r2, [r3, #4]
 8004034:	4b0c      	ldr	r3, [pc, #48]	; (8004068 <HAL_UART_RxCpltCallback+0xa4>)
 8004036:	711a      	strb	r2, [r3, #4]
			  HAL_UART_Receive_IT(&huart1, &byte, 1);
 8004038:	4907      	ldr	r1, [pc, #28]	; (8004058 <HAL_UART_RxCpltCallback+0x94>)
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <HAL_UART_RxCpltCallback+0xa0>)
 800403c:	2201      	movs	r2, #1
 800403e:	0018      	movs	r0, r3
 8004040:	f7fe faf0 	bl	8002624 <HAL_UART_Receive_IT>
			  indexOfReceive = 0;
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <HAL_UART_RxCpltCallback+0x98>)
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	46bd      	mov	sp, r7
 800404e:	b002      	add	sp, #8
 8004050:	bd80      	pop	{r7, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	40013800 	.word	0x40013800
 8004058:	200001c1 	.word	0x200001c1
 800405c:	20000028 	.word	0x20000028
 8004060:	200001b4 	.word	0x200001b4
 8004064:	20000030 	.word	0x20000030
 8004068:	200001bc 	.word	0x200001bc

0800406c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004070:	46c0      	nop			; (mov r8, r8)
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004078:	480d      	ldr	r0, [pc, #52]	; (80040b0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800407a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800407c:	480d      	ldr	r0, [pc, #52]	; (80040b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800407e:	490e      	ldr	r1, [pc, #56]	; (80040b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004080:	4a0e      	ldr	r2, [pc, #56]	; (80040bc <LoopForever+0xe>)
  movs r3, #0
 8004082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004084:	e002      	b.n	800408c <LoopCopyDataInit>

08004086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800408a:	3304      	adds	r3, #4

0800408c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800408c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800408e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004090:	d3f9      	bcc.n	8004086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004092:	4a0b      	ldr	r2, [pc, #44]	; (80040c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004094:	4c0b      	ldr	r4, [pc, #44]	; (80040c4 <LoopForever+0x16>)
  movs r3, #0
 8004096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004098:	e001      	b.n	800409e <LoopFillZerobss>

0800409a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800409a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800409c:	3204      	adds	r2, #4

0800409e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800409e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040a0:	d3fb      	bcc.n	800409a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80040a2:	f7ff ffe3 	bl	800406c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040a6:	f000 f811 	bl	80040cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040aa:	f7ff fb55 	bl	8003758 <main>

080040ae <LoopForever>:

LoopForever:
    b LoopForever
 80040ae:	e7fe      	b.n	80040ae <LoopForever>
   ldr   r0, =_estack
 80040b0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80040b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80040bc:	080041b8 	.word	0x080041b8
  ldr r2, =_sbss
 80040c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80040c4:	200001c4 	.word	0x200001c4

080040c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040c8:	e7fe      	b.n	80040c8 <ADC1_COMP_IRQHandler>
	...

080040cc <__libc_init_array>:
 80040cc:	b570      	push	{r4, r5, r6, lr}
 80040ce:	2600      	movs	r6, #0
 80040d0:	4d0c      	ldr	r5, [pc, #48]	; (8004104 <__libc_init_array+0x38>)
 80040d2:	4c0d      	ldr	r4, [pc, #52]	; (8004108 <__libc_init_array+0x3c>)
 80040d4:	1b64      	subs	r4, r4, r5
 80040d6:	10a4      	asrs	r4, r4, #2
 80040d8:	42a6      	cmp	r6, r4
 80040da:	d109      	bne.n	80040f0 <__libc_init_array+0x24>
 80040dc:	2600      	movs	r6, #0
 80040de:	f000 f821 	bl	8004124 <_init>
 80040e2:	4d0a      	ldr	r5, [pc, #40]	; (800410c <__libc_init_array+0x40>)
 80040e4:	4c0a      	ldr	r4, [pc, #40]	; (8004110 <__libc_init_array+0x44>)
 80040e6:	1b64      	subs	r4, r4, r5
 80040e8:	10a4      	asrs	r4, r4, #2
 80040ea:	42a6      	cmp	r6, r4
 80040ec:	d105      	bne.n	80040fa <__libc_init_array+0x2e>
 80040ee:	bd70      	pop	{r4, r5, r6, pc}
 80040f0:	00b3      	lsls	r3, r6, #2
 80040f2:	58eb      	ldr	r3, [r5, r3]
 80040f4:	4798      	blx	r3
 80040f6:	3601      	adds	r6, #1
 80040f8:	e7ee      	b.n	80040d8 <__libc_init_array+0xc>
 80040fa:	00b3      	lsls	r3, r6, #2
 80040fc:	58eb      	ldr	r3, [r5, r3]
 80040fe:	4798      	blx	r3
 8004100:	3601      	adds	r6, #1
 8004102:	e7f2      	b.n	80040ea <__libc_init_array+0x1e>
 8004104:	080041b0 	.word	0x080041b0
 8004108:	080041b0 	.word	0x080041b0
 800410c:	080041b0 	.word	0x080041b0
 8004110:	080041b4 	.word	0x080041b4

08004114 <memset>:
 8004114:	0003      	movs	r3, r0
 8004116:	1812      	adds	r2, r2, r0
 8004118:	4293      	cmp	r3, r2
 800411a:	d100      	bne.n	800411e <memset+0xa>
 800411c:	4770      	bx	lr
 800411e:	7019      	strb	r1, [r3, #0]
 8004120:	3301      	adds	r3, #1
 8004122:	e7f9      	b.n	8004118 <memset+0x4>

08004124 <_init>:
 8004124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412a:	bc08      	pop	{r3}
 800412c:	469e      	mov	lr, r3
 800412e:	4770      	bx	lr

08004130 <_fini>:
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004136:	bc08      	pop	{r3}
 8004138:	469e      	mov	lr, r3
 800413a:	4770      	bx	lr
